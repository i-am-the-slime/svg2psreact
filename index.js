// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          if (v instanceof Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["fromRight"] = fromRight;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];              
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($63) {
          return go(f($63));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["intercalate"] = intercalate;
  exports["null"] = $$null;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $123 = Data_Maybe.maybe([  ])(singleton);
          return function ($124) {
              return $123(f($124));
          };
      })());
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["catMaybes"] = catMaybes;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];        
  var toArray = Unsafe_Coerce.unsafeCoerce;
  var adaptMaybe = function (f) {
      var $64 = Data_Maybe.fromJust();
      return function ($65) {
          return $64(f(toArray($65)));
      };
  };
  var head = adaptMaybe(Data_Array.head);    
  var adaptAny = function (f) {
      return function ($67) {
          return f(toArray($67));
      };
  };
  var catMaybes = adaptAny(Data_Array.catMaybes);
  exports["head"] = head;
  exports["catMaybes"] = catMaybes;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  exports.withCharCode = function(f) {
      return function (c) {
          return String.fromCharCode(f(c.charCodeAt()));
      }
  }
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Char.Unicode.Internal"] = $PS["Data.Char.Unicode.Internal"] || {};
  var exports = $PS["Data.Char.Unicode.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();                  
  var numConvBlocks = 1230;
  var gencatSO = 8192;
  var rule148 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule149 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatNL = 16777216;
  var rule146 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule147 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatMN = 2097152;
  var rule85 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule105 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule108 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule110 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule112 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule131 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule134 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule135 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule136 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule138 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule141 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule143 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule150 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule151 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule152 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule155 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule161 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule162 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule21 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule23 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule25 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule28 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule36 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule39 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule41 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule86 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule87 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule88 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule89 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule132 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule104 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule117 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule124 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule125 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule127 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule128 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule153 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule154 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule160 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule166 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule22 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule24 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule26 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule35 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule38 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule40 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var rule91 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule92 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule93 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule94 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule96 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule97 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule20
  }, {
      start: 256,
      length: 1,
      convRule: rule21
  }, {
      start: 257,
      length: 1,
      convRule: rule22
  }, {
      start: 258,
      length: 1,
      convRule: rule21
  }, {
      start: 259,
      length: 1,
      convRule: rule22
  }, {
      start: 260,
      length: 1,
      convRule: rule21
  }, {
      start: 261,
      length: 1,
      convRule: rule22
  }, {
      start: 262,
      length: 1,
      convRule: rule21
  }, {
      start: 263,
      length: 1,
      convRule: rule22
  }, {
      start: 264,
      length: 1,
      convRule: rule21
  }, {
      start: 265,
      length: 1,
      convRule: rule22
  }, {
      start: 266,
      length: 1,
      convRule: rule21
  }, {
      start: 267,
      length: 1,
      convRule: rule22
  }, {
      start: 268,
      length: 1,
      convRule: rule21
  }, {
      start: 269,
      length: 1,
      convRule: rule22
  }, {
      start: 270,
      length: 1,
      convRule: rule21
  }, {
      start: 271,
      length: 1,
      convRule: rule22
  }, {
      start: 272,
      length: 1,
      convRule: rule21
  }, {
      start: 273,
      length: 1,
      convRule: rule22
  }, {
      start: 274,
      length: 1,
      convRule: rule21
  }, {
      start: 275,
      length: 1,
      convRule: rule22
  }, {
      start: 276,
      length: 1,
      convRule: rule21
  }, {
      start: 277,
      length: 1,
      convRule: rule22
  }, {
      start: 278,
      length: 1,
      convRule: rule21
  }, {
      start: 279,
      length: 1,
      convRule: rule22
  }, {
      start: 280,
      length: 1,
      convRule: rule21
  }, {
      start: 281,
      length: 1,
      convRule: rule22
  }, {
      start: 282,
      length: 1,
      convRule: rule21
  }, {
      start: 283,
      length: 1,
      convRule: rule22
  }, {
      start: 284,
      length: 1,
      convRule: rule21
  }, {
      start: 285,
      length: 1,
      convRule: rule22
  }, {
      start: 286,
      length: 1,
      convRule: rule21
  }, {
      start: 287,
      length: 1,
      convRule: rule22
  }, {
      start: 288,
      length: 1,
      convRule: rule21
  }, {
      start: 289,
      length: 1,
      convRule: rule22
  }, {
      start: 290,
      length: 1,
      convRule: rule21
  }, {
      start: 291,
      length: 1,
      convRule: rule22
  }, {
      start: 292,
      length: 1,
      convRule: rule21
  }, {
      start: 293,
      length: 1,
      convRule: rule22
  }, {
      start: 294,
      length: 1,
      convRule: rule21
  }, {
      start: 295,
      length: 1,
      convRule: rule22
  }, {
      start: 296,
      length: 1,
      convRule: rule21
  }, {
      start: 297,
      length: 1,
      convRule: rule22
  }, {
      start: 298,
      length: 1,
      convRule: rule21
  }, {
      start: 299,
      length: 1,
      convRule: rule22
  }, {
      start: 300,
      length: 1,
      convRule: rule21
  }, {
      start: 301,
      length: 1,
      convRule: rule22
  }, {
      start: 302,
      length: 1,
      convRule: rule21
  }, {
      start: 303,
      length: 1,
      convRule: rule22
  }, {
      start: 304,
      length: 1,
      convRule: rule23
  }, {
      start: 305,
      length: 1,
      convRule: rule24
  }, {
      start: 306,
      length: 1,
      convRule: rule21
  }, {
      start: 307,
      length: 1,
      convRule: rule22
  }, {
      start: 308,
      length: 1,
      convRule: rule21
  }, {
      start: 309,
      length: 1,
      convRule: rule22
  }, {
      start: 310,
      length: 1,
      convRule: rule21
  }, {
      start: 311,
      length: 1,
      convRule: rule22
  }, {
      start: 313,
      length: 1,
      convRule: rule21
  }, {
      start: 314,
      length: 1,
      convRule: rule22
  }, {
      start: 315,
      length: 1,
      convRule: rule21
  }, {
      start: 316,
      length: 1,
      convRule: rule22
  }, {
      start: 317,
      length: 1,
      convRule: rule21
  }, {
      start: 318,
      length: 1,
      convRule: rule22
  }, {
      start: 319,
      length: 1,
      convRule: rule21
  }, {
      start: 320,
      length: 1,
      convRule: rule22
  }, {
      start: 321,
      length: 1,
      convRule: rule21
  }, {
      start: 322,
      length: 1,
      convRule: rule22
  }, {
      start: 323,
      length: 1,
      convRule: rule21
  }, {
      start: 324,
      length: 1,
      convRule: rule22
  }, {
      start: 325,
      length: 1,
      convRule: rule21
  }, {
      start: 326,
      length: 1,
      convRule: rule22
  }, {
      start: 327,
      length: 1,
      convRule: rule21
  }, {
      start: 328,
      length: 1,
      convRule: rule22
  }, {
      start: 330,
      length: 1,
      convRule: rule21
  }, {
      start: 331,
      length: 1,
      convRule: rule22
  }, {
      start: 332,
      length: 1,
      convRule: rule21
  }, {
      start: 333,
      length: 1,
      convRule: rule22
  }, {
      start: 334,
      length: 1,
      convRule: rule21
  }, {
      start: 335,
      length: 1,
      convRule: rule22
  }, {
      start: 336,
      length: 1,
      convRule: rule21
  }, {
      start: 337,
      length: 1,
      convRule: rule22
  }, {
      start: 338,
      length: 1,
      convRule: rule21
  }, {
      start: 339,
      length: 1,
      convRule: rule22
  }, {
      start: 340,
      length: 1,
      convRule: rule21
  }, {
      start: 341,
      length: 1,
      convRule: rule22
  }, {
      start: 342,
      length: 1,
      convRule: rule21
  }, {
      start: 343,
      length: 1,
      convRule: rule22
  }, {
      start: 344,
      length: 1,
      convRule: rule21
  }, {
      start: 345,
      length: 1,
      convRule: rule22
  }, {
      start: 346,
      length: 1,
      convRule: rule21
  }, {
      start: 347,
      length: 1,
      convRule: rule22
  }, {
      start: 348,
      length: 1,
      convRule: rule21
  }, {
      start: 349,
      length: 1,
      convRule: rule22
  }, {
      start: 350,
      length: 1,
      convRule: rule21
  }, {
      start: 351,
      length: 1,
      convRule: rule22
  }, {
      start: 352,
      length: 1,
      convRule: rule21
  }, {
      start: 353,
      length: 1,
      convRule: rule22
  }, {
      start: 354,
      length: 1,
      convRule: rule21
  }, {
      start: 355,
      length: 1,
      convRule: rule22
  }, {
      start: 356,
      length: 1,
      convRule: rule21
  }, {
      start: 357,
      length: 1,
      convRule: rule22
  }, {
      start: 358,
      length: 1,
      convRule: rule21
  }, {
      start: 359,
      length: 1,
      convRule: rule22
  }, {
      start: 360,
      length: 1,
      convRule: rule21
  }, {
      start: 361,
      length: 1,
      convRule: rule22
  }, {
      start: 362,
      length: 1,
      convRule: rule21
  }, {
      start: 363,
      length: 1,
      convRule: rule22
  }, {
      start: 364,
      length: 1,
      convRule: rule21
  }, {
      start: 365,
      length: 1,
      convRule: rule22
  }, {
      start: 366,
      length: 1,
      convRule: rule21
  }, {
      start: 367,
      length: 1,
      convRule: rule22
  }, {
      start: 368,
      length: 1,
      convRule: rule21
  }, {
      start: 369,
      length: 1,
      convRule: rule22
  }, {
      start: 370,
      length: 1,
      convRule: rule21
  }, {
      start: 371,
      length: 1,
      convRule: rule22
  }, {
      start: 372,
      length: 1,
      convRule: rule21
  }, {
      start: 373,
      length: 1,
      convRule: rule22
  }, {
      start: 374,
      length: 1,
      convRule: rule21
  }, {
      start: 375,
      length: 1,
      convRule: rule22
  }, {
      start: 376,
      length: 1,
      convRule: rule25
  }, {
      start: 377,
      length: 1,
      convRule: rule21
  }, {
      start: 378,
      length: 1,
      convRule: rule22
  }, {
      start: 379,
      length: 1,
      convRule: rule21
  }, {
      start: 380,
      length: 1,
      convRule: rule22
  }, {
      start: 381,
      length: 1,
      convRule: rule21
  }, {
      start: 382,
      length: 1,
      convRule: rule22
  }, {
      start: 383,
      length: 1,
      convRule: rule26
  }, {
      start: 384,
      length: 1,
      convRule: rule27
  }, {
      start: 385,
      length: 1,
      convRule: rule28
  }, {
      start: 386,
      length: 1,
      convRule: rule21
  }, {
      start: 387,
      length: 1,
      convRule: rule22
  }, {
      start: 388,
      length: 1,
      convRule: rule21
  }, {
      start: 389,
      length: 1,
      convRule: rule22
  }, {
      start: 390,
      length: 1,
      convRule: rule29
  }, {
      start: 391,
      length: 1,
      convRule: rule21
  }, {
      start: 392,
      length: 1,
      convRule: rule22
  }, {
      start: 393,
      length: 2,
      convRule: rule30
  }, {
      start: 395,
      length: 1,
      convRule: rule21
  }, {
      start: 396,
      length: 1,
      convRule: rule22
  }, {
      start: 398,
      length: 1,
      convRule: rule31
  }, {
      start: 399,
      length: 1,
      convRule: rule32
  }, {
      start: 400,
      length: 1,
      convRule: rule33
  }, {
      start: 401,
      length: 1,
      convRule: rule21
  }, {
      start: 402,
      length: 1,
      convRule: rule22
  }, {
      start: 403,
      length: 1,
      convRule: rule30
  }, {
      start: 404,
      length: 1,
      convRule: rule34
  }, {
      start: 405,
      length: 1,
      convRule: rule35
  }, {
      start: 406,
      length: 1,
      convRule: rule36
  }, {
      start: 407,
      length: 1,
      convRule: rule37
  }, {
      start: 408,
      length: 1,
      convRule: rule21
  }, {
      start: 409,
      length: 1,
      convRule: rule22
  }, {
      start: 410,
      length: 1,
      convRule: rule38
  }, {
      start: 412,
      length: 1,
      convRule: rule36
  }, {
      start: 413,
      length: 1,
      convRule: rule39
  }, {
      start: 414,
      length: 1,
      convRule: rule40
  }, {
      start: 415,
      length: 1,
      convRule: rule41
  }, {
      start: 416,
      length: 1,
      convRule: rule21
  }, {
      start: 417,
      length: 1,
      convRule: rule22
  }, {
      start: 418,
      length: 1,
      convRule: rule21
  }, {
      start: 419,
      length: 1,
      convRule: rule22
  }, {
      start: 420,
      length: 1,
      convRule: rule21
  }, {
      start: 421,
      length: 1,
      convRule: rule22
  }, {
      start: 422,
      length: 1,
      convRule: rule42
  }, {
      start: 423,
      length: 1,
      convRule: rule21
  }, {
      start: 424,
      length: 1,
      convRule: rule22
  }, {
      start: 425,
      length: 1,
      convRule: rule42
  }, {
      start: 428,
      length: 1,
      convRule: rule21
  }, {
      start: 429,
      length: 1,
      convRule: rule22
  }, {
      start: 430,
      length: 1,
      convRule: rule42
  }, {
      start: 431,
      length: 1,
      convRule: rule21
  }, {
      start: 432,
      length: 1,
      convRule: rule22
  }, {
      start: 433,
      length: 2,
      convRule: rule43
  }, {
      start: 435,
      length: 1,
      convRule: rule21
  }, {
      start: 436,
      length: 1,
      convRule: rule22
  }, {
      start: 437,
      length: 1,
      convRule: rule21
  }, {
      start: 438,
      length: 1,
      convRule: rule22
  }, {
      start: 439,
      length: 1,
      convRule: rule44
  }, {
      start: 440,
      length: 1,
      convRule: rule21
  }, {
      start: 441,
      length: 1,
      convRule: rule22
  }, {
      start: 444,
      length: 1,
      convRule: rule21
  }, {
      start: 445,
      length: 1,
      convRule: rule22
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule21
  }, {
      start: 462,
      length: 1,
      convRule: rule22
  }, {
      start: 463,
      length: 1,
      convRule: rule21
  }, {
      start: 464,
      length: 1,
      convRule: rule22
  }, {
      start: 465,
      length: 1,
      convRule: rule21
  }, {
      start: 466,
      length: 1,
      convRule: rule22
  }, {
      start: 467,
      length: 1,
      convRule: rule21
  }, {
      start: 468,
      length: 1,
      convRule: rule22
  }, {
      start: 469,
      length: 1,
      convRule: rule21
  }, {
      start: 470,
      length: 1,
      convRule: rule22
  }, {
      start: 471,
      length: 1,
      convRule: rule21
  }, {
      start: 472,
      length: 1,
      convRule: rule22
  }, {
      start: 473,
      length: 1,
      convRule: rule21
  }, {
      start: 474,
      length: 1,
      convRule: rule22
  }, {
      start: 475,
      length: 1,
      convRule: rule21
  }, {
      start: 476,
      length: 1,
      convRule: rule22
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule21
  }, {
      start: 479,
      length: 1,
      convRule: rule22
  }, {
      start: 480,
      length: 1,
      convRule: rule21
  }, {
      start: 481,
      length: 1,
      convRule: rule22
  }, {
      start: 482,
      length: 1,
      convRule: rule21
  }, {
      start: 483,
      length: 1,
      convRule: rule22
  }, {
      start: 484,
      length: 1,
      convRule: rule21
  }, {
      start: 485,
      length: 1,
      convRule: rule22
  }, {
      start: 486,
      length: 1,
      convRule: rule21
  }, {
      start: 487,
      length: 1,
      convRule: rule22
  }, {
      start: 488,
      length: 1,
      convRule: rule21
  }, {
      start: 489,
      length: 1,
      convRule: rule22
  }, {
      start: 490,
      length: 1,
      convRule: rule21
  }, {
      start: 491,
      length: 1,
      convRule: rule22
  }, {
      start: 492,
      length: 1,
      convRule: rule21
  }, {
      start: 493,
      length: 1,
      convRule: rule22
  }, {
      start: 494,
      length: 1,
      convRule: rule21
  }, {
      start: 495,
      length: 1,
      convRule: rule22
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule21
  }, {
      start: 501,
      length: 1,
      convRule: rule22
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule21
  }, {
      start: 505,
      length: 1,
      convRule: rule22
  }, {
      start: 506,
      length: 1,
      convRule: rule21
  }, {
      start: 507,
      length: 1,
      convRule: rule22
  }, {
      start: 508,
      length: 1,
      convRule: rule21
  }, {
      start: 509,
      length: 1,
      convRule: rule22
  }, {
      start: 510,
      length: 1,
      convRule: rule21
  }, {
      start: 511,
      length: 1,
      convRule: rule22
  }, {
      start: 512,
      length: 1,
      convRule: rule21
  }, {
      start: 513,
      length: 1,
      convRule: rule22
  }, {
      start: 514,
      length: 1,
      convRule: rule21
  }, {
      start: 515,
      length: 1,
      convRule: rule22
  }, {
      start: 516,
      length: 1,
      convRule: rule21
  }, {
      start: 517,
      length: 1,
      convRule: rule22
  }, {
      start: 518,
      length: 1,
      convRule: rule21
  }, {
      start: 519,
      length: 1,
      convRule: rule22
  }, {
      start: 520,
      length: 1,
      convRule: rule21
  }, {
      start: 521,
      length: 1,
      convRule: rule22
  }, {
      start: 522,
      length: 1,
      convRule: rule21
  }, {
      start: 523,
      length: 1,
      convRule: rule22
  }, {
      start: 524,
      length: 1,
      convRule: rule21
  }, {
      start: 525,
      length: 1,
      convRule: rule22
  }, {
      start: 526,
      length: 1,
      convRule: rule21
  }, {
      start: 527,
      length: 1,
      convRule: rule22
  }, {
      start: 528,
      length: 1,
      convRule: rule21
  }, {
      start: 529,
      length: 1,
      convRule: rule22
  }, {
      start: 530,
      length: 1,
      convRule: rule21
  }, {
      start: 531,
      length: 1,
      convRule: rule22
  }, {
      start: 532,
      length: 1,
      convRule: rule21
  }, {
      start: 533,
      length: 1,
      convRule: rule22
  }, {
      start: 534,
      length: 1,
      convRule: rule21
  }, {
      start: 535,
      length: 1,
      convRule: rule22
  }, {
      start: 536,
      length: 1,
      convRule: rule21
  }, {
      start: 537,
      length: 1,
      convRule: rule22
  }, {
      start: 538,
      length: 1,
      convRule: rule21
  }, {
      start: 539,
      length: 1,
      convRule: rule22
  }, {
      start: 540,
      length: 1,
      convRule: rule21
  }, {
      start: 541,
      length: 1,
      convRule: rule22
  }, {
      start: 542,
      length: 1,
      convRule: rule21
  }, {
      start: 543,
      length: 1,
      convRule: rule22
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule21
  }, {
      start: 547,
      length: 1,
      convRule: rule22
  }, {
      start: 548,
      length: 1,
      convRule: rule21
  }, {
      start: 549,
      length: 1,
      convRule: rule22
  }, {
      start: 550,
      length: 1,
      convRule: rule21
  }, {
      start: 551,
      length: 1,
      convRule: rule22
  }, {
      start: 552,
      length: 1,
      convRule: rule21
  }, {
      start: 553,
      length: 1,
      convRule: rule22
  }, {
      start: 554,
      length: 1,
      convRule: rule21
  }, {
      start: 555,
      length: 1,
      convRule: rule22
  }, {
      start: 556,
      length: 1,
      convRule: rule21
  }, {
      start: 557,
      length: 1,
      convRule: rule22
  }, {
      start: 558,
      length: 1,
      convRule: rule21
  }, {
      start: 559,
      length: 1,
      convRule: rule22
  }, {
      start: 560,
      length: 1,
      convRule: rule21
  }, {
      start: 561,
      length: 1,
      convRule: rule22
  }, {
      start: 562,
      length: 1,
      convRule: rule21
  }, {
      start: 563,
      length: 1,
      convRule: rule22
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule21
  }, {
      start: 572,
      length: 1,
      convRule: rule22
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule21
  }, {
      start: 578,
      length: 1,
      convRule: rule22
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule21
  }, {
      start: 583,
      length: 1,
      convRule: rule22
  }, {
      start: 584,
      length: 1,
      convRule: rule21
  }, {
      start: 585,
      length: 1,
      convRule: rule22
  }, {
      start: 586,
      length: 1,
      convRule: rule21
  }, {
      start: 587,
      length: 1,
      convRule: rule22
  }, {
      start: 588,
      length: 1,
      convRule: rule21
  }, {
      start: 589,
      length: 1,
      convRule: rule22
  }, {
      start: 590,
      length: 1,
      convRule: rule21
  }, {
      start: 591,
      length: 1,
      convRule: rule22
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 611,
      length: 1,
      convRule: rule69
  }, {
      start: 613,
      length: 1,
      convRule: rule70
  }, {
      start: 616,
      length: 1,
      convRule: rule71
  }, {
      start: 617,
      length: 1,
      convRule: rule72
  }, {
      start: 619,
      length: 1,
      convRule: rule73
  }, {
      start: 623,
      length: 1,
      convRule: rule72
  }, {
      start: 625,
      length: 1,
      convRule: rule74
  }, {
      start: 626,
      length: 1,
      convRule: rule75
  }, {
      start: 629,
      length: 1,
      convRule: rule76
  }, {
      start: 637,
      length: 1,
      convRule: rule77
  }, {
      start: 640,
      length: 1,
      convRule: rule78
  }, {
      start: 643,
      length: 1,
      convRule: rule78
  }, {
      start: 648,
      length: 1,
      convRule: rule78
  }, {
      start: 649,
      length: 1,
      convRule: rule79
  }, {
      start: 650,
      length: 2,
      convRule: rule80
  }, {
      start: 652,
      length: 1,
      convRule: rule81
  }, {
      start: 658,
      length: 1,
      convRule: rule82
  }, {
      start: 837,
      length: 1,
      convRule: rule85
  }, {
      start: 880,
      length: 1,
      convRule: rule21
  }, {
      start: 881,
      length: 1,
      convRule: rule22
  }, {
      start: 882,
      length: 1,
      convRule: rule21
  }, {
      start: 883,
      length: 1,
      convRule: rule22
  }, {
      start: 886,
      length: 1,
      convRule: rule21
  }, {
      start: 887,
      length: 1,
      convRule: rule22
  }, {
      start: 891,
      length: 3,
      convRule: rule40
  }, {
      start: 902,
      length: 1,
      convRule: rule86
  }, {
      start: 904,
      length: 3,
      convRule: rule87
  }, {
      start: 908,
      length: 1,
      convRule: rule88
  }, {
      start: 910,
      length: 2,
      convRule: rule89
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule90
  }, {
      start: 941,
      length: 3,
      convRule: rule91
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule92
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule93
  }, {
      start: 973,
      length: 2,
      convRule: rule94
  }, {
      start: 975,
      length: 1,
      convRule: rule95
  }, {
      start: 976,
      length: 1,
      convRule: rule96
  }, {
      start: 977,
      length: 1,
      convRule: rule97
  }, {
      start: 981,
      length: 1,
      convRule: rule99
  }, {
      start: 982,
      length: 1,
      convRule: rule100
  }, {
      start: 983,
      length: 1,
      convRule: rule101
  }, {
      start: 984,
      length: 1,
      convRule: rule21
  }, {
      start: 985,
      length: 1,
      convRule: rule22
  }, {
      start: 986,
      length: 1,
      convRule: rule21
  }, {
      start: 987,
      length: 1,
      convRule: rule22
  }, {
      start: 988,
      length: 1,
      convRule: rule21
  }, {
      start: 989,
      length: 1,
      convRule: rule22
  }, {
      start: 990,
      length: 1,
      convRule: rule21
  }, {
      start: 991,
      length: 1,
      convRule: rule22
  }, {
      start: 992,
      length: 1,
      convRule: rule21
  }, {
      start: 993,
      length: 1,
      convRule: rule22
  }, {
      start: 994,
      length: 1,
      convRule: rule21
  }, {
      start: 995,
      length: 1,
      convRule: rule22
  }, {
      start: 996,
      length: 1,
      convRule: rule21
  }, {
      start: 997,
      length: 1,
      convRule: rule22
  }, {
      start: 998,
      length: 1,
      convRule: rule21
  }, {
      start: 999,
      length: 1,
      convRule: rule22
  }, {
      start: 1000,
      length: 1,
      convRule: rule21
  }, {
      start: 1001,
      length: 1,
      convRule: rule22
  }, {
      start: 1002,
      length: 1,
      convRule: rule21
  }, {
      start: 1003,
      length: 1,
      convRule: rule22
  }, {
      start: 1004,
      length: 1,
      convRule: rule21
  }, {
      start: 1005,
      length: 1,
      convRule: rule22
  }, {
      start: 1006,
      length: 1,
      convRule: rule21
  }, {
      start: 1007,
      length: 1,
      convRule: rule22
  }, {
      start: 1008,
      length: 1,
      convRule: rule102
  }, {
      start: 1009,
      length: 1,
      convRule: rule103
  }, {
      start: 1010,
      length: 1,
      convRule: rule104
  }, {
      start: 1012,
      length: 1,
      convRule: rule105
  }, {
      start: 1013,
      length: 1,
      convRule: rule106
  }, {
      start: 1015,
      length: 1,
      convRule: rule21
  }, {
      start: 1016,
      length: 1,
      convRule: rule22
  }, {
      start: 1017,
      length: 1,
      convRule: rule107
  }, {
      start: 1018,
      length: 1,
      convRule: rule21
  }, {
      start: 1019,
      length: 1,
      convRule: rule22
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule108
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule103
  }, {
      start: 1120,
      length: 1,
      convRule: rule21
  }, {
      start: 1121,
      length: 1,
      convRule: rule22
  }, {
      start: 1122,
      length: 1,
      convRule: rule21
  }, {
      start: 1123,
      length: 1,
      convRule: rule22
  }, {
      start: 1124,
      length: 1,
      convRule: rule21
  }, {
      start: 1125,
      length: 1,
      convRule: rule22
  }, {
      start: 1126,
      length: 1,
      convRule: rule21
  }, {
      start: 1127,
      length: 1,
      convRule: rule22
  }, {
      start: 1128,
      length: 1,
      convRule: rule21
  }, {
      start: 1129,
      length: 1,
      convRule: rule22
  }, {
      start: 1130,
      length: 1,
      convRule: rule21
  }, {
      start: 1131,
      length: 1,
      convRule: rule22
  }, {
      start: 1132,
      length: 1,
      convRule: rule21
  }, {
      start: 1133,
      length: 1,
      convRule: rule22
  }, {
      start: 1134,
      length: 1,
      convRule: rule21
  }, {
      start: 1135,
      length: 1,
      convRule: rule22
  }, {
      start: 1136,
      length: 1,
      convRule: rule21
  }, {
      start: 1137,
      length: 1,
      convRule: rule22
  }, {
      start: 1138,
      length: 1,
      convRule: rule21
  }, {
      start: 1139,
      length: 1,
      convRule: rule22
  }, {
      start: 1140,
      length: 1,
      convRule: rule21
  }, {
      start: 1141,
      length: 1,
      convRule: rule22
  }, {
      start: 1142,
      length: 1,
      convRule: rule21
  }, {
      start: 1143,
      length: 1,
      convRule: rule22
  }, {
      start: 1144,
      length: 1,
      convRule: rule21
  }, {
      start: 1145,
      length: 1,
      convRule: rule22
  }, {
      start: 1146,
      length: 1,
      convRule: rule21
  }, {
      start: 1147,
      length: 1,
      convRule: rule22
  }, {
      start: 1148,
      length: 1,
      convRule: rule21
  }, {
      start: 1149,
      length: 1,
      convRule: rule22
  }, {
      start: 1150,
      length: 1,
      convRule: rule21
  }, {
      start: 1151,
      length: 1,
      convRule: rule22
  }, {
      start: 1152,
      length: 1,
      convRule: rule21
  }, {
      start: 1153,
      length: 1,
      convRule: rule22
  }, {
      start: 1162,
      length: 1,
      convRule: rule21
  }, {
      start: 1163,
      length: 1,
      convRule: rule22
  }, {
      start: 1164,
      length: 1,
      convRule: rule21
  }, {
      start: 1165,
      length: 1,
      convRule: rule22
  }, {
      start: 1166,
      length: 1,
      convRule: rule21
  }, {
      start: 1167,
      length: 1,
      convRule: rule22
  }, {
      start: 1168,
      length: 1,
      convRule: rule21
  }, {
      start: 1169,
      length: 1,
      convRule: rule22
  }, {
      start: 1170,
      length: 1,
      convRule: rule21
  }, {
      start: 1171,
      length: 1,
      convRule: rule22
  }, {
      start: 1172,
      length: 1,
      convRule: rule21
  }, {
      start: 1173,
      length: 1,
      convRule: rule22
  }, {
      start: 1174,
      length: 1,
      convRule: rule21
  }, {
      start: 1175,
      length: 1,
      convRule: rule22
  }, {
      start: 1176,
      length: 1,
      convRule: rule21
  }, {
      start: 1177,
      length: 1,
      convRule: rule22
  }, {
      start: 1178,
      length: 1,
      convRule: rule21
  }, {
      start: 1179,
      length: 1,
      convRule: rule22
  }, {
      start: 1180,
      length: 1,
      convRule: rule21
  }, {
      start: 1181,
      length: 1,
      convRule: rule22
  }, {
      start: 1182,
      length: 1,
      convRule: rule21
  }, {
      start: 1183,
      length: 1,
      convRule: rule22
  }, {
      start: 1184,
      length: 1,
      convRule: rule21
  }, {
      start: 1185,
      length: 1,
      convRule: rule22
  }, {
      start: 1186,
      length: 1,
      convRule: rule21
  }, {
      start: 1187,
      length: 1,
      convRule: rule22
  }, {
      start: 1188,
      length: 1,
      convRule: rule21
  }, {
      start: 1189,
      length: 1,
      convRule: rule22
  }, {
      start: 1190,
      length: 1,
      convRule: rule21
  }, {
      start: 1191,
      length: 1,
      convRule: rule22
  }, {
      start: 1192,
      length: 1,
      convRule: rule21
  }, {
      start: 1193,
      length: 1,
      convRule: rule22
  }, {
      start: 1194,
      length: 1,
      convRule: rule21
  }, {
      start: 1195,
      length: 1,
      convRule: rule22
  }, {
      start: 1196,
      length: 1,
      convRule: rule21
  }, {
      start: 1197,
      length: 1,
      convRule: rule22
  }, {
      start: 1198,
      length: 1,
      convRule: rule21
  }, {
      start: 1199,
      length: 1,
      convRule: rule22
  }, {
      start: 1200,
      length: 1,
      convRule: rule21
  }, {
      start: 1201,
      length: 1,
      convRule: rule22
  }, {
      start: 1202,
      length: 1,
      convRule: rule21
  }, {
      start: 1203,
      length: 1,
      convRule: rule22
  }, {
      start: 1204,
      length: 1,
      convRule: rule21
  }, {
      start: 1205,
      length: 1,
      convRule: rule22
  }, {
      start: 1206,
      length: 1,
      convRule: rule21
  }, {
      start: 1207,
      length: 1,
      convRule: rule22
  }, {
      start: 1208,
      length: 1,
      convRule: rule21
  }, {
      start: 1209,
      length: 1,
      convRule: rule22
  }, {
      start: 1210,
      length: 1,
      convRule: rule21
  }, {
      start: 1211,
      length: 1,
      convRule: rule22
  }, {
      start: 1212,
      length: 1,
      convRule: rule21
  }, {
      start: 1213,
      length: 1,
      convRule: rule22
  }, {
      start: 1214,
      length: 1,
      convRule: rule21
  }, {
      start: 1215,
      length: 1,
      convRule: rule22
  }, {
      start: 1216,
      length: 1,
      convRule: rule110
  }, {
      start: 1217,
      length: 1,
      convRule: rule21
  }, {
      start: 1218,
      length: 1,
      convRule: rule22
  }, {
      start: 1219,
      length: 1,
      convRule: rule21
  }, {
      start: 1220,
      length: 1,
      convRule: rule22
  }, {
      start: 1221,
      length: 1,
      convRule: rule21
  }, {
      start: 1222,
      length: 1,
      convRule: rule22
  }, {
      start: 1223,
      length: 1,
      convRule: rule21
  }, {
      start: 1224,
      length: 1,
      convRule: rule22
  }, {
      start: 1225,
      length: 1,
      convRule: rule21
  }, {
      start: 1226,
      length: 1,
      convRule: rule22
  }, {
      start: 1227,
      length: 1,
      convRule: rule21
  }, {
      start: 1228,
      length: 1,
      convRule: rule22
  }, {
      start: 1229,
      length: 1,
      convRule: rule21
  }, {
      start: 1230,
      length: 1,
      convRule: rule22
  }, {
      start: 1231,
      length: 1,
      convRule: rule111
  }, {
      start: 1232,
      length: 1,
      convRule: rule21
  }, {
      start: 1233,
      length: 1,
      convRule: rule22
  }, {
      start: 1234,
      length: 1,
      convRule: rule21
  }, {
      start: 1235,
      length: 1,
      convRule: rule22
  }, {
      start: 1236,
      length: 1,
      convRule: rule21
  }, {
      start: 1237,
      length: 1,
      convRule: rule22
  }, {
      start: 1238,
      length: 1,
      convRule: rule21
  }, {
      start: 1239,
      length: 1,
      convRule: rule22
  }, {
      start: 1240,
      length: 1,
      convRule: rule21
  }, {
      start: 1241,
      length: 1,
      convRule: rule22
  }, {
      start: 1242,
      length: 1,
      convRule: rule21
  }, {
      start: 1243,
      length: 1,
      convRule: rule22
  }, {
      start: 1244,
      length: 1,
      convRule: rule21
  }, {
      start: 1245,
      length: 1,
      convRule: rule22
  }, {
      start: 1246,
      length: 1,
      convRule: rule21
  }, {
      start: 1247,
      length: 1,
      convRule: rule22
  }, {
      start: 1248,
      length: 1,
      convRule: rule21
  }, {
      start: 1249,
      length: 1,
      convRule: rule22
  }, {
      start: 1250,
      length: 1,
      convRule: rule21
  }, {
      start: 1251,
      length: 1,
      convRule: rule22
  }, {
      start: 1252,
      length: 1,
      convRule: rule21
  }, {
      start: 1253,
      length: 1,
      convRule: rule22
  }, {
      start: 1254,
      length: 1,
      convRule: rule21
  }, {
      start: 1255,
      length: 1,
      convRule: rule22
  }, {
      start: 1256,
      length: 1,
      convRule: rule21
  }, {
      start: 1257,
      length: 1,
      convRule: rule22
  }, {
      start: 1258,
      length: 1,
      convRule: rule21
  }, {
      start: 1259,
      length: 1,
      convRule: rule22
  }, {
      start: 1260,
      length: 1,
      convRule: rule21
  }, {
      start: 1261,
      length: 1,
      convRule: rule22
  }, {
      start: 1262,
      length: 1,
      convRule: rule21
  }, {
      start: 1263,
      length: 1,
      convRule: rule22
  }, {
      start: 1264,
      length: 1,
      convRule: rule21
  }, {
      start: 1265,
      length: 1,
      convRule: rule22
  }, {
      start: 1266,
      length: 1,
      convRule: rule21
  }, {
      start: 1267,
      length: 1,
      convRule: rule22
  }, {
      start: 1268,
      length: 1,
      convRule: rule21
  }, {
      start: 1269,
      length: 1,
      convRule: rule22
  }, {
      start: 1270,
      length: 1,
      convRule: rule21
  }, {
      start: 1271,
      length: 1,
      convRule: rule22
  }, {
      start: 1272,
      length: 1,
      convRule: rule21
  }, {
      start: 1273,
      length: 1,
      convRule: rule22
  }, {
      start: 1274,
      length: 1,
      convRule: rule21
  }, {
      start: 1275,
      length: 1,
      convRule: rule22
  }, {
      start: 1276,
      length: 1,
      convRule: rule21
  }, {
      start: 1277,
      length: 1,
      convRule: rule22
  }, {
      start: 1278,
      length: 1,
      convRule: rule21
  }, {
      start: 1279,
      length: 1,
      convRule: rule22
  }, {
      start: 1280,
      length: 1,
      convRule: rule21
  }, {
      start: 1281,
      length: 1,
      convRule: rule22
  }, {
      start: 1282,
      length: 1,
      convRule: rule21
  }, {
      start: 1283,
      length: 1,
      convRule: rule22
  }, {
      start: 1284,
      length: 1,
      convRule: rule21
  }, {
      start: 1285,
      length: 1,
      convRule: rule22
  }, {
      start: 1286,
      length: 1,
      convRule: rule21
  }, {
      start: 1287,
      length: 1,
      convRule: rule22
  }, {
      start: 1288,
      length: 1,
      convRule: rule21
  }, {
      start: 1289,
      length: 1,
      convRule: rule22
  }, {
      start: 1290,
      length: 1,
      convRule: rule21
  }, {
      start: 1291,
      length: 1,
      convRule: rule22
  }, {
      start: 1292,
      length: 1,
      convRule: rule21
  }, {
      start: 1293,
      length: 1,
      convRule: rule22
  }, {
      start: 1294,
      length: 1,
      convRule: rule21
  }, {
      start: 1295,
      length: 1,
      convRule: rule22
  }, {
      start: 1296,
      length: 1,
      convRule: rule21
  }, {
      start: 1297,
      length: 1,
      convRule: rule22
  }, {
      start: 1298,
      length: 1,
      convRule: rule21
  }, {
      start: 1299,
      length: 1,
      convRule: rule22
  }, {
      start: 1300,
      length: 1,
      convRule: rule21
  }, {
      start: 1301,
      length: 1,
      convRule: rule22
  }, {
      start: 1302,
      length: 1,
      convRule: rule21
  }, {
      start: 1303,
      length: 1,
      convRule: rule22
  }, {
      start: 1304,
      length: 1,
      convRule: rule21
  }, {
      start: 1305,
      length: 1,
      convRule: rule22
  }, {
      start: 1306,
      length: 1,
      convRule: rule21
  }, {
      start: 1307,
      length: 1,
      convRule: rule22
  }, {
      start: 1308,
      length: 1,
      convRule: rule21
  }, {
      start: 1309,
      length: 1,
      convRule: rule22
  }, {
      start: 1310,
      length: 1,
      convRule: rule21
  }, {
      start: 1311,
      length: 1,
      convRule: rule22
  }, {
      start: 1312,
      length: 1,
      convRule: rule21
  }, {
      start: 1313,
      length: 1,
      convRule: rule22
  }, {
      start: 1314,
      length: 1,
      convRule: rule21
  }, {
      start: 1315,
      length: 1,
      convRule: rule22
  }, {
      start: 1316,
      length: 1,
      convRule: rule21
  }, {
      start: 1317,
      length: 1,
      convRule: rule22
  }, {
      start: 1318,
      length: 1,
      convRule: rule21
  }, {
      start: 1319,
      length: 1,
      convRule: rule22
  }, {
      start: 1329,
      length: 38,
      convRule: rule112
  }, {
      start: 1377,
      length: 38,
      convRule: rule113
  }, {
      start: 4256,
      length: 38,
      convRule: rule115
  }, {
      start: 7545,
      length: 1,
      convRule: rule117
  }, {
      start: 7549,
      length: 1,
      convRule: rule118
  }, {
      start: 7680,
      length: 1,
      convRule: rule21
  }, {
      start: 7681,
      length: 1,
      convRule: rule22
  }, {
      start: 7682,
      length: 1,
      convRule: rule21
  }, {
      start: 7683,
      length: 1,
      convRule: rule22
  }, {
      start: 7684,
      length: 1,
      convRule: rule21
  }, {
      start: 7685,
      length: 1,
      convRule: rule22
  }, {
      start: 7686,
      length: 1,
      convRule: rule21
  }, {
      start: 7687,
      length: 1,
      convRule: rule22
  }, {
      start: 7688,
      length: 1,
      convRule: rule21
  }, {
      start: 7689,
      length: 1,
      convRule: rule22
  }, {
      start: 7690,
      length: 1,
      convRule: rule21
  }, {
      start: 7691,
      length: 1,
      convRule: rule22
  }, {
      start: 7692,
      length: 1,
      convRule: rule21
  }, {
      start: 7693,
      length: 1,
      convRule: rule22
  }, {
      start: 7694,
      length: 1,
      convRule: rule21
  }, {
      start: 7695,
      length: 1,
      convRule: rule22
  }, {
      start: 7696,
      length: 1,
      convRule: rule21
  }, {
      start: 7697,
      length: 1,
      convRule: rule22
  }, {
      start: 7698,
      length: 1,
      convRule: rule21
  }, {
      start: 7699,
      length: 1,
      convRule: rule22
  }, {
      start: 7700,
      length: 1,
      convRule: rule21
  }, {
      start: 7701,
      length: 1,
      convRule: rule22
  }, {
      start: 7702,
      length: 1,
      convRule: rule21
  }, {
      start: 7703,
      length: 1,
      convRule: rule22
  }, {
      start: 7704,
      length: 1,
      convRule: rule21
  }, {
      start: 7705,
      length: 1,
      convRule: rule22
  }, {
      start: 7706,
      length: 1,
      convRule: rule21
  }, {
      start: 7707,
      length: 1,
      convRule: rule22
  }, {
      start: 7708,
      length: 1,
      convRule: rule21
  }, {
      start: 7709,
      length: 1,
      convRule: rule22
  }, {
      start: 7710,
      length: 1,
      convRule: rule21
  }, {
      start: 7711,
      length: 1,
      convRule: rule22
  }, {
      start: 7712,
      length: 1,
      convRule: rule21
  }, {
      start: 7713,
      length: 1,
      convRule: rule22
  }, {
      start: 7714,
      length: 1,
      convRule: rule21
  }, {
      start: 7715,
      length: 1,
      convRule: rule22
  }, {
      start: 7716,
      length: 1,
      convRule: rule21
  }, {
      start: 7717,
      length: 1,
      convRule: rule22
  }, {
      start: 7718,
      length: 1,
      convRule: rule21
  }, {
      start: 7719,
      length: 1,
      convRule: rule22
  }, {
      start: 7720,
      length: 1,
      convRule: rule21
  }, {
      start: 7721,
      length: 1,
      convRule: rule22
  }, {
      start: 7722,
      length: 1,
      convRule: rule21
  }, {
      start: 7723,
      length: 1,
      convRule: rule22
  }, {
      start: 7724,
      length: 1,
      convRule: rule21
  }, {
      start: 7725,
      length: 1,
      convRule: rule22
  }, {
      start: 7726,
      length: 1,
      convRule: rule21
  }, {
      start: 7727,
      length: 1,
      convRule: rule22
  }, {
      start: 7728,
      length: 1,
      convRule: rule21
  }, {
      start: 7729,
      length: 1,
      convRule: rule22
  }, {
      start: 7730,
      length: 1,
      convRule: rule21
  }, {
      start: 7731,
      length: 1,
      convRule: rule22
  }, {
      start: 7732,
      length: 1,
      convRule: rule21
  }, {
      start: 7733,
      length: 1,
      convRule: rule22
  }, {
      start: 7734,
      length: 1,
      convRule: rule21
  }, {
      start: 7735,
      length: 1,
      convRule: rule22
  }, {
      start: 7736,
      length: 1,
      convRule: rule21
  }, {
      start: 7737,
      length: 1,
      convRule: rule22
  }, {
      start: 7738,
      length: 1,
      convRule: rule21
  }, {
      start: 7739,
      length: 1,
      convRule: rule22
  }, {
      start: 7740,
      length: 1,
      convRule: rule21
  }, {
      start: 7741,
      length: 1,
      convRule: rule22
  }, {
      start: 7742,
      length: 1,
      convRule: rule21
  }, {
      start: 7743,
      length: 1,
      convRule: rule22
  }, {
      start: 7744,
      length: 1,
      convRule: rule21
  }, {
      start: 7745,
      length: 1,
      convRule: rule22
  }, {
      start: 7746,
      length: 1,
      convRule: rule21
  }, {
      start: 7747,
      length: 1,
      convRule: rule22
  }, {
      start: 7748,
      length: 1,
      convRule: rule21
  }, {
      start: 7749,
      length: 1,
      convRule: rule22
  }, {
      start: 7750,
      length: 1,
      convRule: rule21
  }, {
      start: 7751,
      length: 1,
      convRule: rule22
  }, {
      start: 7752,
      length: 1,
      convRule: rule21
  }, {
      start: 7753,
      length: 1,
      convRule: rule22
  }, {
      start: 7754,
      length: 1,
      convRule: rule21
  }, {
      start: 7755,
      length: 1,
      convRule: rule22
  }, {
      start: 7756,
      length: 1,
      convRule: rule21
  }, {
      start: 7757,
      length: 1,
      convRule: rule22
  }, {
      start: 7758,
      length: 1,
      convRule: rule21
  }, {
      start: 7759,
      length: 1,
      convRule: rule22
  }, {
      start: 7760,
      length: 1,
      convRule: rule21
  }, {
      start: 7761,
      length: 1,
      convRule: rule22
  }, {
      start: 7762,
      length: 1,
      convRule: rule21
  }, {
      start: 7763,
      length: 1,
      convRule: rule22
  }, {
      start: 7764,
      length: 1,
      convRule: rule21
  }, {
      start: 7765,
      length: 1,
      convRule: rule22
  }, {
      start: 7766,
      length: 1,
      convRule: rule21
  }, {
      start: 7767,
      length: 1,
      convRule: rule22
  }, {
      start: 7768,
      length: 1,
      convRule: rule21
  }, {
      start: 7769,
      length: 1,
      convRule: rule22
  }, {
      start: 7770,
      length: 1,
      convRule: rule21
  }, {
      start: 7771,
      length: 1,
      convRule: rule22
  }, {
      start: 7772,
      length: 1,
      convRule: rule21
  }, {
      start: 7773,
      length: 1,
      convRule: rule22
  }, {
      start: 7774,
      length: 1,
      convRule: rule21
  }, {
      start: 7775,
      length: 1,
      convRule: rule22
  }, {
      start: 7776,
      length: 1,
      convRule: rule21
  }, {
      start: 7777,
      length: 1,
      convRule: rule22
  }, {
      start: 7778,
      length: 1,
      convRule: rule21
  }, {
      start: 7779,
      length: 1,
      convRule: rule22
  }, {
      start: 7780,
      length: 1,
      convRule: rule21
  }, {
      start: 7781,
      length: 1,
      convRule: rule22
  }, {
      start: 7782,
      length: 1,
      convRule: rule21
  }, {
      start: 7783,
      length: 1,
      convRule: rule22
  }, {
      start: 7784,
      length: 1,
      convRule: rule21
  }, {
      start: 7785,
      length: 1,
      convRule: rule22
  }, {
      start: 7786,
      length: 1,
      convRule: rule21
  }, {
      start: 7787,
      length: 1,
      convRule: rule22
  }, {
      start: 7788,
      length: 1,
      convRule: rule21
  }, {
      start: 7789,
      length: 1,
      convRule: rule22
  }, {
      start: 7790,
      length: 1,
      convRule: rule21
  }, {
      start: 7791,
      length: 1,
      convRule: rule22
  }, {
      start: 7792,
      length: 1,
      convRule: rule21
  }, {
      start: 7793,
      length: 1,
      convRule: rule22
  }, {
      start: 7794,
      length: 1,
      convRule: rule21
  }, {
      start: 7795,
      length: 1,
      convRule: rule22
  }, {
      start: 7796,
      length: 1,
      convRule: rule21
  }, {
      start: 7797,
      length: 1,
      convRule: rule22
  }, {
      start: 7798,
      length: 1,
      convRule: rule21
  }, {
      start: 7799,
      length: 1,
      convRule: rule22
  }, {
      start: 7800,
      length: 1,
      convRule: rule21
  }, {
      start: 7801,
      length: 1,
      convRule: rule22
  }, {
      start: 7802,
      length: 1,
      convRule: rule21
  }, {
      start: 7803,
      length: 1,
      convRule: rule22
  }, {
      start: 7804,
      length: 1,
      convRule: rule21
  }, {
      start: 7805,
      length: 1,
      convRule: rule22
  }, {
      start: 7806,
      length: 1,
      convRule: rule21
  }, {
      start: 7807,
      length: 1,
      convRule: rule22
  }, {
      start: 7808,
      length: 1,
      convRule: rule21
  }, {
      start: 7809,
      length: 1,
      convRule: rule22
  }, {
      start: 7810,
      length: 1,
      convRule: rule21
  }, {
      start: 7811,
      length: 1,
      convRule: rule22
  }, {
      start: 7812,
      length: 1,
      convRule: rule21
  }, {
      start: 7813,
      length: 1,
      convRule: rule22
  }, {
      start: 7814,
      length: 1,
      convRule: rule21
  }, {
      start: 7815,
      length: 1,
      convRule: rule22
  }, {
      start: 7816,
      length: 1,
      convRule: rule21
  }, {
      start: 7817,
      length: 1,
      convRule: rule22
  }, {
      start: 7818,
      length: 1,
      convRule: rule21
  }, {
      start: 7819,
      length: 1,
      convRule: rule22
  }, {
      start: 7820,
      length: 1,
      convRule: rule21
  }, {
      start: 7821,
      length: 1,
      convRule: rule22
  }, {
      start: 7822,
      length: 1,
      convRule: rule21
  }, {
      start: 7823,
      length: 1,
      convRule: rule22
  }, {
      start: 7824,
      length: 1,
      convRule: rule21
  }, {
      start: 7825,
      length: 1,
      convRule: rule22
  }, {
      start: 7826,
      length: 1,
      convRule: rule21
  }, {
      start: 7827,
      length: 1,
      convRule: rule22
  }, {
      start: 7828,
      length: 1,
      convRule: rule21
  }, {
      start: 7829,
      length: 1,
      convRule: rule22
  }, {
      start: 7835,
      length: 1,
      convRule: rule119
  }, {
      start: 7838,
      length: 1,
      convRule: rule120
  }, {
      start: 7840,
      length: 1,
      convRule: rule21
  }, {
      start: 7841,
      length: 1,
      convRule: rule22
  }, {
      start: 7842,
      length: 1,
      convRule: rule21
  }, {
      start: 7843,
      length: 1,
      convRule: rule22
  }, {
      start: 7844,
      length: 1,
      convRule: rule21
  }, {
      start: 7845,
      length: 1,
      convRule: rule22
  }, {
      start: 7846,
      length: 1,
      convRule: rule21
  }, {
      start: 7847,
      length: 1,
      convRule: rule22
  }, {
      start: 7848,
      length: 1,
      convRule: rule21
  }, {
      start: 7849,
      length: 1,
      convRule: rule22
  }, {
      start: 7850,
      length: 1,
      convRule: rule21
  }, {
      start: 7851,
      length: 1,
      convRule: rule22
  }, {
      start: 7852,
      length: 1,
      convRule: rule21
  }, {
      start: 7853,
      length: 1,
      convRule: rule22
  }, {
      start: 7854,
      length: 1,
      convRule: rule21
  }, {
      start: 7855,
      length: 1,
      convRule: rule22
  }, {
      start: 7856,
      length: 1,
      convRule: rule21
  }, {
      start: 7857,
      length: 1,
      convRule: rule22
  }, {
      start: 7858,
      length: 1,
      convRule: rule21
  }, {
      start: 7859,
      length: 1,
      convRule: rule22
  }, {
      start: 7860,
      length: 1,
      convRule: rule21
  }, {
      start: 7861,
      length: 1,
      convRule: rule22
  }, {
      start: 7862,
      length: 1,
      convRule: rule21
  }, {
      start: 7863,
      length: 1,
      convRule: rule22
  }, {
      start: 7864,
      length: 1,
      convRule: rule21
  }, {
      start: 7865,
      length: 1,
      convRule: rule22
  }, {
      start: 7866,
      length: 1,
      convRule: rule21
  }, {
      start: 7867,
      length: 1,
      convRule: rule22
  }, {
      start: 7868,
      length: 1,
      convRule: rule21
  }, {
      start: 7869,
      length: 1,
      convRule: rule22
  }, {
      start: 7870,
      length: 1,
      convRule: rule21
  }, {
      start: 7871,
      length: 1,
      convRule: rule22
  }, {
      start: 7872,
      length: 1,
      convRule: rule21
  }, {
      start: 7873,
      length: 1,
      convRule: rule22
  }, {
      start: 7874,
      length: 1,
      convRule: rule21
  }, {
      start: 7875,
      length: 1,
      convRule: rule22
  }, {
      start: 7876,
      length: 1,
      convRule: rule21
  }, {
      start: 7877,
      length: 1,
      convRule: rule22
  }, {
      start: 7878,
      length: 1,
      convRule: rule21
  }, {
      start: 7879,
      length: 1,
      convRule: rule22
  }, {
      start: 7880,
      length: 1,
      convRule: rule21
  }, {
      start: 7881,
      length: 1,
      convRule: rule22
  }, {
      start: 7882,
      length: 1,
      convRule: rule21
  }, {
      start: 7883,
      length: 1,
      convRule: rule22
  }, {
      start: 7884,
      length: 1,
      convRule: rule21
  }, {
      start: 7885,
      length: 1,
      convRule: rule22
  }, {
      start: 7886,
      length: 1,
      convRule: rule21
  }, {
      start: 7887,
      length: 1,
      convRule: rule22
  }, {
      start: 7888,
      length: 1,
      convRule: rule21
  }, {
      start: 7889,
      length: 1,
      convRule: rule22
  }, {
      start: 7890,
      length: 1,
      convRule: rule21
  }, {
      start: 7891,
      length: 1,
      convRule: rule22
  }, {
      start: 7892,
      length: 1,
      convRule: rule21
  }, {
      start: 7893,
      length: 1,
      convRule: rule22
  }, {
      start: 7894,
      length: 1,
      convRule: rule21
  }, {
      start: 7895,
      length: 1,
      convRule: rule22
  }, {
      start: 7896,
      length: 1,
      convRule: rule21
  }, {
      start: 7897,
      length: 1,
      convRule: rule22
  }, {
      start: 7898,
      length: 1,
      convRule: rule21
  }, {
      start: 7899,
      length: 1,
      convRule: rule22
  }, {
      start: 7900,
      length: 1,
      convRule: rule21
  }, {
      start: 7901,
      length: 1,
      convRule: rule22
  }, {
      start: 7902,
      length: 1,
      convRule: rule21
  }, {
      start: 7903,
      length: 1,
      convRule: rule22
  }, {
      start: 7904,
      length: 1,
      convRule: rule21
  }, {
      start: 7905,
      length: 1,
      convRule: rule22
  }, {
      start: 7906,
      length: 1,
      convRule: rule21
  }, {
      start: 7907,
      length: 1,
      convRule: rule22
  }, {
      start: 7908,
      length: 1,
      convRule: rule21
  }, {
      start: 7909,
      length: 1,
      convRule: rule22
  }, {
      start: 7910,
      length: 1,
      convRule: rule21
  }, {
      start: 7911,
      length: 1,
      convRule: rule22
  }, {
      start: 7912,
      length: 1,
      convRule: rule21
  }, {
      start: 7913,
      length: 1,
      convRule: rule22
  }, {
      start: 7914,
      length: 1,
      convRule: rule21
  }, {
      start: 7915,
      length: 1,
      convRule: rule22
  }, {
      start: 7916,
      length: 1,
      convRule: rule21
  }, {
      start: 7917,
      length: 1,
      convRule: rule22
  }, {
      start: 7918,
      length: 1,
      convRule: rule21
  }, {
      start: 7919,
      length: 1,
      convRule: rule22
  }, {
      start: 7920,
      length: 1,
      convRule: rule21
  }, {
      start: 7921,
      length: 1,
      convRule: rule22
  }, {
      start: 7922,
      length: 1,
      convRule: rule21
  }, {
      start: 7923,
      length: 1,
      convRule: rule22
  }, {
      start: 7924,
      length: 1,
      convRule: rule21
  }, {
      start: 7925,
      length: 1,
      convRule: rule22
  }, {
      start: 7926,
      length: 1,
      convRule: rule21
  }, {
      start: 7927,
      length: 1,
      convRule: rule22
  }, {
      start: 7928,
      length: 1,
      convRule: rule21
  }, {
      start: 7929,
      length: 1,
      convRule: rule22
  }, {
      start: 7930,
      length: 1,
      convRule: rule21
  }, {
      start: 7931,
      length: 1,
      convRule: rule22
  }, {
      start: 7932,
      length: 1,
      convRule: rule21
  }, {
      start: 7933,
      length: 1,
      convRule: rule22
  }, {
      start: 7934,
      length: 1,
      convRule: rule21
  }, {
      start: 7935,
      length: 1,
      convRule: rule22
  }, {
      start: 7936,
      length: 8,
      convRule: rule121
  }, {
      start: 7944,
      length: 8,
      convRule: rule122
  }, {
      start: 7952,
      length: 6,
      convRule: rule121
  }, {
      start: 7960,
      length: 6,
      convRule: rule122
  }, {
      start: 7968,
      length: 8,
      convRule: rule121
  }, {
      start: 7976,
      length: 8,
      convRule: rule122
  }, {
      start: 7984,
      length: 8,
      convRule: rule121
  }, {
      start: 7992,
      length: 8,
      convRule: rule122
  }, {
      start: 8000,
      length: 6,
      convRule: rule121
  }, {
      start: 8008,
      length: 6,
      convRule: rule122
  }, {
      start: 8017,
      length: 1,
      convRule: rule121
  }, {
      start: 8019,
      length: 1,
      convRule: rule121
  }, {
      start: 8021,
      length: 1,
      convRule: rule121
  }, {
      start: 8023,
      length: 1,
      convRule: rule121
  }, {
      start: 8025,
      length: 1,
      convRule: rule122
  }, {
      start: 8027,
      length: 1,
      convRule: rule122
  }, {
      start: 8029,
      length: 1,
      convRule: rule122
  }, {
      start: 8031,
      length: 1,
      convRule: rule122
  }, {
      start: 8032,
      length: 8,
      convRule: rule121
  }, {
      start: 8040,
      length: 8,
      convRule: rule122
  }, {
      start: 8048,
      length: 2,
      convRule: rule123
  }, {
      start: 8050,
      length: 4,
      convRule: rule124
  }, {
      start: 8054,
      length: 2,
      convRule: rule125
  }, {
      start: 8056,
      length: 2,
      convRule: rule126
  }, {
      start: 8058,
      length: 2,
      convRule: rule127
  }, {
      start: 8060,
      length: 2,
      convRule: rule128
  }, {
      start: 8064,
      length: 8,
      convRule: rule121
  }, {
      start: 8072,
      length: 8,
      convRule: rule129
  }, {
      start: 8080,
      length: 8,
      convRule: rule121
  }, {
      start: 8088,
      length: 8,
      convRule: rule129
  }, {
      start: 8096,
      length: 8,
      convRule: rule121
  }, {
      start: 8104,
      length: 8,
      convRule: rule129
  }, {
      start: 8112,
      length: 2,
      convRule: rule121
  }, {
      start: 8115,
      length: 1,
      convRule: rule130
  }, {
      start: 8120,
      length: 2,
      convRule: rule122
  }, {
      start: 8122,
      length: 2,
      convRule: rule131
  }, {
      start: 8124,
      length: 1,
      convRule: rule132
  }, {
      start: 8126,
      length: 1,
      convRule: rule133
  }, {
      start: 8131,
      length: 1,
      convRule: rule130
  }, {
      start: 8136,
      length: 4,
      convRule: rule134
  }, {
      start: 8140,
      length: 1,
      convRule: rule132
  }, {
      start: 8144,
      length: 2,
      convRule: rule121
  }, {
      start: 8152,
      length: 2,
      convRule: rule122
  }, {
      start: 8154,
      length: 2,
      convRule: rule135
  }, {
      start: 8160,
      length: 2,
      convRule: rule121
  }, {
      start: 8165,
      length: 1,
      convRule: rule104
  }, {
      start: 8168,
      length: 2,
      convRule: rule122
  }, {
      start: 8170,
      length: 2,
      convRule: rule136
  }, {
      start: 8172,
      length: 1,
      convRule: rule107
  }, {
      start: 8179,
      length: 1,
      convRule: rule130
  }, {
      start: 8184,
      length: 2,
      convRule: rule137
  }, {
      start: 8186,
      length: 2,
      convRule: rule138
  }, {
      start: 8188,
      length: 1,
      convRule: rule132
  }, {
      start: 8486,
      length: 1,
      convRule: rule141
  }, {
      start: 8490,
      length: 1,
      convRule: rule142
  }, {
      start: 8491,
      length: 1,
      convRule: rule143
  }, {
      start: 8498,
      length: 1,
      convRule: rule144
  }, {
      start: 8526,
      length: 1,
      convRule: rule145
  }, {
      start: 8544,
      length: 16,
      convRule: rule146
  }, {
      start: 8560,
      length: 16,
      convRule: rule147
  }, {
      start: 8579,
      length: 1,
      convRule: rule21
  }, {
      start: 8580,
      length: 1,
      convRule: rule22
  }, {
      start: 9398,
      length: 26,
      convRule: rule148
  }, {
      start: 9424,
      length: 26,
      convRule: rule149
  }, {
      start: 11264,
      length: 47,
      convRule: rule112
  }, {
      start: 11312,
      length: 47,
      convRule: rule113
  }, {
      start: 11360,
      length: 1,
      convRule: rule21
  }, {
      start: 11361,
      length: 1,
      convRule: rule22
  }, {
      start: 11362,
      length: 1,
      convRule: rule150
  }, {
      start: 11363,
      length: 1,
      convRule: rule151
  }, {
      start: 11364,
      length: 1,
      convRule: rule152
  }, {
      start: 11365,
      length: 1,
      convRule: rule153
  }, {
      start: 11366,
      length: 1,
      convRule: rule154
  }, {
      start: 11367,
      length: 1,
      convRule: rule21
  }, {
      start: 11368,
      length: 1,
      convRule: rule22
  }, {
      start: 11369,
      length: 1,
      convRule: rule21
  }, {
      start: 11370,
      length: 1,
      convRule: rule22
  }, {
      start: 11371,
      length: 1,
      convRule: rule21
  }, {
      start: 11372,
      length: 1,
      convRule: rule22
  }, {
      start: 11373,
      length: 1,
      convRule: rule155
  }, {
      start: 11374,
      length: 1,
      convRule: rule156
  }, {
      start: 11375,
      length: 1,
      convRule: rule157
  }, {
      start: 11376,
      length: 1,
      convRule: rule158
  }, {
      start: 11378,
      length: 1,
      convRule: rule21
  }, {
      start: 11379,
      length: 1,
      convRule: rule22
  }, {
      start: 11381,
      length: 1,
      convRule: rule21
  }, {
      start: 11382,
      length: 1,
      convRule: rule22
  }, {
      start: 11390,
      length: 2,
      convRule: rule159
  }, {
      start: 11392,
      length: 1,
      convRule: rule21
  }, {
      start: 11393,
      length: 1,
      convRule: rule22
  }, {
      start: 11394,
      length: 1,
      convRule: rule21
  }, {
      start: 11395,
      length: 1,
      convRule: rule22
  }, {
      start: 11396,
      length: 1,
      convRule: rule21
  }, {
      start: 11397,
      length: 1,
      convRule: rule22
  }, {
      start: 11398,
      length: 1,
      convRule: rule21
  }, {
      start: 11399,
      length: 1,
      convRule: rule22
  }, {
      start: 11400,
      length: 1,
      convRule: rule21
  }, {
      start: 11401,
      length: 1,
      convRule: rule22
  }, {
      start: 11402,
      length: 1,
      convRule: rule21
  }, {
      start: 11403,
      length: 1,
      convRule: rule22
  }, {
      start: 11404,
      length: 1,
      convRule: rule21
  }, {
      start: 11405,
      length: 1,
      convRule: rule22
  }, {
      start: 11406,
      length: 1,
      convRule: rule21
  }, {
      start: 11407,
      length: 1,
      convRule: rule22
  }, {
      start: 11408,
      length: 1,
      convRule: rule21
  }, {
      start: 11409,
      length: 1,
      convRule: rule22
  }, {
      start: 11410,
      length: 1,
      convRule: rule21
  }, {
      start: 11411,
      length: 1,
      convRule: rule22
  }, {
      start: 11412,
      length: 1,
      convRule: rule21
  }, {
      start: 11413,
      length: 1,
      convRule: rule22
  }, {
      start: 11414,
      length: 1,
      convRule: rule21
  }, {
      start: 11415,
      length: 1,
      convRule: rule22
  }, {
      start: 11416,
      length: 1,
      convRule: rule21
  }, {
      start: 11417,
      length: 1,
      convRule: rule22
  }, {
      start: 11418,
      length: 1,
      convRule: rule21
  }, {
      start: 11419,
      length: 1,
      convRule: rule22
  }, {
      start: 11420,
      length: 1,
      convRule: rule21
  }, {
      start: 11421,
      length: 1,
      convRule: rule22
  }, {
      start: 11422,
      length: 1,
      convRule: rule21
  }, {
      start: 11423,
      length: 1,
      convRule: rule22
  }, {
      start: 11424,
      length: 1,
      convRule: rule21
  }, {
      start: 11425,
      length: 1,
      convRule: rule22
  }, {
      start: 11426,
      length: 1,
      convRule: rule21
  }, {
      start: 11427,
      length: 1,
      convRule: rule22
  }, {
      start: 11428,
      length: 1,
      convRule: rule21
  }, {
      start: 11429,
      length: 1,
      convRule: rule22
  }, {
      start: 11430,
      length: 1,
      convRule: rule21
  }, {
      start: 11431,
      length: 1,
      convRule: rule22
  }, {
      start: 11432,
      length: 1,
      convRule: rule21
  }, {
      start: 11433,
      length: 1,
      convRule: rule22
  }, {
      start: 11434,
      length: 1,
      convRule: rule21
  }, {
      start: 11435,
      length: 1,
      convRule: rule22
  }, {
      start: 11436,
      length: 1,
      convRule: rule21
  }, {
      start: 11437,
      length: 1,
      convRule: rule22
  }, {
      start: 11438,
      length: 1,
      convRule: rule21
  }, {
      start: 11439,
      length: 1,
      convRule: rule22
  }, {
      start: 11440,
      length: 1,
      convRule: rule21
  }, {
      start: 11441,
      length: 1,
      convRule: rule22
  }, {
      start: 11442,
      length: 1,
      convRule: rule21
  }, {
      start: 11443,
      length: 1,
      convRule: rule22
  }, {
      start: 11444,
      length: 1,
      convRule: rule21
  }, {
      start: 11445,
      length: 1,
      convRule: rule22
  }, {
      start: 11446,
      length: 1,
      convRule: rule21
  }, {
      start: 11447,
      length: 1,
      convRule: rule22
  }, {
      start: 11448,
      length: 1,
      convRule: rule21
  }, {
      start: 11449,
      length: 1,
      convRule: rule22
  }, {
      start: 11450,
      length: 1,
      convRule: rule21
  }, {
      start: 11451,
      length: 1,
      convRule: rule22
  }, {
      start: 11452,
      length: 1,
      convRule: rule21
  }, {
      start: 11453,
      length: 1,
      convRule: rule22
  }, {
      start: 11454,
      length: 1,
      convRule: rule21
  }, {
      start: 11455,
      length: 1,
      convRule: rule22
  }, {
      start: 11456,
      length: 1,
      convRule: rule21
  }, {
      start: 11457,
      length: 1,
      convRule: rule22
  }, {
      start: 11458,
      length: 1,
      convRule: rule21
  }, {
      start: 11459,
      length: 1,
      convRule: rule22
  }, {
      start: 11460,
      length: 1,
      convRule: rule21
  }, {
      start: 11461,
      length: 1,
      convRule: rule22
  }, {
      start: 11462,
      length: 1,
      convRule: rule21
  }, {
      start: 11463,
      length: 1,
      convRule: rule22
  }, {
      start: 11464,
      length: 1,
      convRule: rule21
  }, {
      start: 11465,
      length: 1,
      convRule: rule22
  }, {
      start: 11466,
      length: 1,
      convRule: rule21
  }, {
      start: 11467,
      length: 1,
      convRule: rule22
  }, {
      start: 11468,
      length: 1,
      convRule: rule21
  }, {
      start: 11469,
      length: 1,
      convRule: rule22
  }, {
      start: 11470,
      length: 1,
      convRule: rule21
  }, {
      start: 11471,
      length: 1,
      convRule: rule22
  }, {
      start: 11472,
      length: 1,
      convRule: rule21
  }, {
      start: 11473,
      length: 1,
      convRule: rule22
  }, {
      start: 11474,
      length: 1,
      convRule: rule21
  }, {
      start: 11475,
      length: 1,
      convRule: rule22
  }, {
      start: 11476,
      length: 1,
      convRule: rule21
  }, {
      start: 11477,
      length: 1,
      convRule: rule22
  }, {
      start: 11478,
      length: 1,
      convRule: rule21
  }, {
      start: 11479,
      length: 1,
      convRule: rule22
  }, {
      start: 11480,
      length: 1,
      convRule: rule21
  }, {
      start: 11481,
      length: 1,
      convRule: rule22
  }, {
      start: 11482,
      length: 1,
      convRule: rule21
  }, {
      start: 11483,
      length: 1,
      convRule: rule22
  }, {
      start: 11484,
      length: 1,
      convRule: rule21
  }, {
      start: 11485,
      length: 1,
      convRule: rule22
  }, {
      start: 11486,
      length: 1,
      convRule: rule21
  }, {
      start: 11487,
      length: 1,
      convRule: rule22
  }, {
      start: 11488,
      length: 1,
      convRule: rule21
  }, {
      start: 11489,
      length: 1,
      convRule: rule22
  }, {
      start: 11490,
      length: 1,
      convRule: rule21
  }, {
      start: 11491,
      length: 1,
      convRule: rule22
  }, {
      start: 11499,
      length: 1,
      convRule: rule21
  }, {
      start: 11500,
      length: 1,
      convRule: rule22
  }, {
      start: 11501,
      length: 1,
      convRule: rule21
  }, {
      start: 11502,
      length: 1,
      convRule: rule22
  }, {
      start: 11520,
      length: 38,
      convRule: rule160
  }, {
      start: 42560,
      length: 1,
      convRule: rule21
  }, {
      start: 42561,
      length: 1,
      convRule: rule22
  }, {
      start: 42562,
      length: 1,
      convRule: rule21
  }, {
      start: 42563,
      length: 1,
      convRule: rule22
  }, {
      start: 42564,
      length: 1,
      convRule: rule21
  }, {
      start: 42565,
      length: 1,
      convRule: rule22
  }, {
      start: 42566,
      length: 1,
      convRule: rule21
  }, {
      start: 42567,
      length: 1,
      convRule: rule22
  }, {
      start: 42568,
      length: 1,
      convRule: rule21
  }, {
      start: 42569,
      length: 1,
      convRule: rule22
  }, {
      start: 42570,
      length: 1,
      convRule: rule21
  }, {
      start: 42571,
      length: 1,
      convRule: rule22
  }, {
      start: 42572,
      length: 1,
      convRule: rule21
  }, {
      start: 42573,
      length: 1,
      convRule: rule22
  }, {
      start: 42574,
      length: 1,
      convRule: rule21
  }, {
      start: 42575,
      length: 1,
      convRule: rule22
  }, {
      start: 42576,
      length: 1,
      convRule: rule21
  }, {
      start: 42577,
      length: 1,
      convRule: rule22
  }, {
      start: 42578,
      length: 1,
      convRule: rule21
  }, {
      start: 42579,
      length: 1,
      convRule: rule22
  }, {
      start: 42580,
      length: 1,
      convRule: rule21
  }, {
      start: 42581,
      length: 1,
      convRule: rule22
  }, {
      start: 42582,
      length: 1,
      convRule: rule21
  }, {
      start: 42583,
      length: 1,
      convRule: rule22
  }, {
      start: 42584,
      length: 1,
      convRule: rule21
  }, {
      start: 42585,
      length: 1,
      convRule: rule22
  }, {
      start: 42586,
      length: 1,
      convRule: rule21
  }, {
      start: 42587,
      length: 1,
      convRule: rule22
  }, {
      start: 42588,
      length: 1,
      convRule: rule21
  }, {
      start: 42589,
      length: 1,
      convRule: rule22
  }, {
      start: 42590,
      length: 1,
      convRule: rule21
  }, {
      start: 42591,
      length: 1,
      convRule: rule22
  }, {
      start: 42592,
      length: 1,
      convRule: rule21
  }, {
      start: 42593,
      length: 1,
      convRule: rule22
  }, {
      start: 42594,
      length: 1,
      convRule: rule21
  }, {
      start: 42595,
      length: 1,
      convRule: rule22
  }, {
      start: 42596,
      length: 1,
      convRule: rule21
  }, {
      start: 42597,
      length: 1,
      convRule: rule22
  }, {
      start: 42598,
      length: 1,
      convRule: rule21
  }, {
      start: 42599,
      length: 1,
      convRule: rule22
  }, {
      start: 42600,
      length: 1,
      convRule: rule21
  }, {
      start: 42601,
      length: 1,
      convRule: rule22
  }, {
      start: 42602,
      length: 1,
      convRule: rule21
  }, {
      start: 42603,
      length: 1,
      convRule: rule22
  }, {
      start: 42604,
      length: 1,
      convRule: rule21
  }, {
      start: 42605,
      length: 1,
      convRule: rule22
  }, {
      start: 42624,
      length: 1,
      convRule: rule21
  }, {
      start: 42625,
      length: 1,
      convRule: rule22
  }, {
      start: 42626,
      length: 1,
      convRule: rule21
  }, {
      start: 42627,
      length: 1,
      convRule: rule22
  }, {
      start: 42628,
      length: 1,
      convRule: rule21
  }, {
      start: 42629,
      length: 1,
      convRule: rule22
  }, {
      start: 42630,
      length: 1,
      convRule: rule21
  }, {
      start: 42631,
      length: 1,
      convRule: rule22
  }, {
      start: 42632,
      length: 1,
      convRule: rule21
  }, {
      start: 42633,
      length: 1,
      convRule: rule22
  }, {
      start: 42634,
      length: 1,
      convRule: rule21
  }, {
      start: 42635,
      length: 1,
      convRule: rule22
  }, {
      start: 42636,
      length: 1,
      convRule: rule21
  }, {
      start: 42637,
      length: 1,
      convRule: rule22
  }, {
      start: 42638,
      length: 1,
      convRule: rule21
  }, {
      start: 42639,
      length: 1,
      convRule: rule22
  }, {
      start: 42640,
      length: 1,
      convRule: rule21
  }, {
      start: 42641,
      length: 1,
      convRule: rule22
  }, {
      start: 42642,
      length: 1,
      convRule: rule21
  }, {
      start: 42643,
      length: 1,
      convRule: rule22
  }, {
      start: 42644,
      length: 1,
      convRule: rule21
  }, {
      start: 42645,
      length: 1,
      convRule: rule22
  }, {
      start: 42646,
      length: 1,
      convRule: rule21
  }, {
      start: 42647,
      length: 1,
      convRule: rule22
  }, {
      start: 42786,
      length: 1,
      convRule: rule21
  }, {
      start: 42787,
      length: 1,
      convRule: rule22
  }, {
      start: 42788,
      length: 1,
      convRule: rule21
  }, {
      start: 42789,
      length: 1,
      convRule: rule22
  }, {
      start: 42790,
      length: 1,
      convRule: rule21
  }, {
      start: 42791,
      length: 1,
      convRule: rule22
  }, {
      start: 42792,
      length: 1,
      convRule: rule21
  }, {
      start: 42793,
      length: 1,
      convRule: rule22
  }, {
      start: 42794,
      length: 1,
      convRule: rule21
  }, {
      start: 42795,
      length: 1,
      convRule: rule22
  }, {
      start: 42796,
      length: 1,
      convRule: rule21
  }, {
      start: 42797,
      length: 1,
      convRule: rule22
  }, {
      start: 42798,
      length: 1,
      convRule: rule21
  }, {
      start: 42799,
      length: 1,
      convRule: rule22
  }, {
      start: 42802,
      length: 1,
      convRule: rule21
  }, {
      start: 42803,
      length: 1,
      convRule: rule22
  }, {
      start: 42804,
      length: 1,
      convRule: rule21
  }, {
      start: 42805,
      length: 1,
      convRule: rule22
  }, {
      start: 42806,
      length: 1,
      convRule: rule21
  }, {
      start: 42807,
      length: 1,
      convRule: rule22
  }, {
      start: 42808,
      length: 1,
      convRule: rule21
  }, {
      start: 42809,
      length: 1,
      convRule: rule22
  }, {
      start: 42810,
      length: 1,
      convRule: rule21
  }, {
      start: 42811,
      length: 1,
      convRule: rule22
  }, {
      start: 42812,
      length: 1,
      convRule: rule21
  }, {
      start: 42813,
      length: 1,
      convRule: rule22
  }, {
      start: 42814,
      length: 1,
      convRule: rule21
  }, {
      start: 42815,
      length: 1,
      convRule: rule22
  }, {
      start: 42816,
      length: 1,
      convRule: rule21
  }, {
      start: 42817,
      length: 1,
      convRule: rule22
  }, {
      start: 42818,
      length: 1,
      convRule: rule21
  }, {
      start: 42819,
      length: 1,
      convRule: rule22
  }, {
      start: 42820,
      length: 1,
      convRule: rule21
  }, {
      start: 42821,
      length: 1,
      convRule: rule22
  }, {
      start: 42822,
      length: 1,
      convRule: rule21
  }, {
      start: 42823,
      length: 1,
      convRule: rule22
  }, {
      start: 42824,
      length: 1,
      convRule: rule21
  }, {
      start: 42825,
      length: 1,
      convRule: rule22
  }, {
      start: 42826,
      length: 1,
      convRule: rule21
  }, {
      start: 42827,
      length: 1,
      convRule: rule22
  }, {
      start: 42828,
      length: 1,
      convRule: rule21
  }, {
      start: 42829,
      length: 1,
      convRule: rule22
  }, {
      start: 42830,
      length: 1,
      convRule: rule21
  }, {
      start: 42831,
      length: 1,
      convRule: rule22
  }, {
      start: 42832,
      length: 1,
      convRule: rule21
  }, {
      start: 42833,
      length: 1,
      convRule: rule22
  }, {
      start: 42834,
      length: 1,
      convRule: rule21
  }, {
      start: 42835,
      length: 1,
      convRule: rule22
  }, {
      start: 42836,
      length: 1,
      convRule: rule21
  }, {
      start: 42837,
      length: 1,
      convRule: rule22
  }, {
      start: 42838,
      length: 1,
      convRule: rule21
  }, {
      start: 42839,
      length: 1,
      convRule: rule22
  }, {
      start: 42840,
      length: 1,
      convRule: rule21
  }, {
      start: 42841,
      length: 1,
      convRule: rule22
  }, {
      start: 42842,
      length: 1,
      convRule: rule21
  }, {
      start: 42843,
      length: 1,
      convRule: rule22
  }, {
      start: 42844,
      length: 1,
      convRule: rule21
  }, {
      start: 42845,
      length: 1,
      convRule: rule22
  }, {
      start: 42846,
      length: 1,
      convRule: rule21
  }, {
      start: 42847,
      length: 1,
      convRule: rule22
  }, {
      start: 42848,
      length: 1,
      convRule: rule21
  }, {
      start: 42849,
      length: 1,
      convRule: rule22
  }, {
      start: 42850,
      length: 1,
      convRule: rule21
  }, {
      start: 42851,
      length: 1,
      convRule: rule22
  }, {
      start: 42852,
      length: 1,
      convRule: rule21
  }, {
      start: 42853,
      length: 1,
      convRule: rule22
  }, {
      start: 42854,
      length: 1,
      convRule: rule21
  }, {
      start: 42855,
      length: 1,
      convRule: rule22
  }, {
      start: 42856,
      length: 1,
      convRule: rule21
  }, {
      start: 42857,
      length: 1,
      convRule: rule22
  }, {
      start: 42858,
      length: 1,
      convRule: rule21
  }, {
      start: 42859,
      length: 1,
      convRule: rule22
  }, {
      start: 42860,
      length: 1,
      convRule: rule21
  }, {
      start: 42861,
      length: 1,
      convRule: rule22
  }, {
      start: 42862,
      length: 1,
      convRule: rule21
  }, {
      start: 42863,
      length: 1,
      convRule: rule22
  }, {
      start: 42873,
      length: 1,
      convRule: rule21
  }, {
      start: 42874,
      length: 1,
      convRule: rule22
  }, {
      start: 42875,
      length: 1,
      convRule: rule21
  }, {
      start: 42876,
      length: 1,
      convRule: rule22
  }, {
      start: 42877,
      length: 1,
      convRule: rule161
  }, {
      start: 42878,
      length: 1,
      convRule: rule21
  }, {
      start: 42879,
      length: 1,
      convRule: rule22
  }, {
      start: 42880,
      length: 1,
      convRule: rule21
  }, {
      start: 42881,
      length: 1,
      convRule: rule22
  }, {
      start: 42882,
      length: 1,
      convRule: rule21
  }, {
      start: 42883,
      length: 1,
      convRule: rule22
  }, {
      start: 42884,
      length: 1,
      convRule: rule21
  }, {
      start: 42885,
      length: 1,
      convRule: rule22
  }, {
      start: 42886,
      length: 1,
      convRule: rule21
  }, {
      start: 42887,
      length: 1,
      convRule: rule22
  }, {
      start: 42891,
      length: 1,
      convRule: rule21
  }, {
      start: 42892,
      length: 1,
      convRule: rule22
  }, {
      start: 42893,
      length: 1,
      convRule: rule162
  }, {
      start: 42896,
      length: 1,
      convRule: rule21
  }, {
      start: 42897,
      length: 1,
      convRule: rule22
  }, {
      start: 42912,
      length: 1,
      convRule: rule21
  }, {
      start: 42913,
      length: 1,
      convRule: rule22
  }, {
      start: 42914,
      length: 1,
      convRule: rule21
  }, {
      start: 42915,
      length: 1,
      convRule: rule22
  }, {
      start: 42916,
      length: 1,
      convRule: rule21
  }, {
      start: 42917,
      length: 1,
      convRule: rule22
  }, {
      start: 42918,
      length: 1,
      convRule: rule21
  }, {
      start: 42919,
      length: 1,
      convRule: rule22
  }, {
      start: 42920,
      length: 1,
      convRule: rule21
  }, {
      start: 42921,
      length: 1,
      convRule: rule22
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule165
  }, {
      start: 66600,
      length: 40,
      convRule: rule166
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowupper = caseConv(function (v) {
      return v.updist;
  });
  exports["uTowupper"] = uTowupper;
  exports["uTowlower"] = uTowlower;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Char.Unicode"] = $PS["Data.Char.Unicode"] || {};
  var exports = $PS["Data.Char.Unicode"];
  var $foreign = $PS["Data.Char.Unicode"];
  var Data_Char_Unicode_Internal = $PS["Data.Char.Unicode.Internal"];
  var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
  var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
  exports["toLower"] = toLower;
  exports["toUpper"] = toUpper;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["disj"] = disj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Functor = $PS["Data.Functor"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, (function () {
      var $233 = Data_NonEmpty.singleton(plusList);
      return function ($234) {
          return NonEmptyList($233($234));
      };
  })());
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["plusList"] = plusList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Unit = $PS["Data.Unit"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  exports["manyRec"] = manyRec;
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var wrappedOperation = function (name) {
      return function (f) {
          return function (v) {
              var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
              if (v1 instanceof Data_List_Types.Cons) {
                  return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              };
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 91, column 3 - line 93, column 81): " + [ v1.constructor.name ]);
          };
      };
  };
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var singleton = (function () {
      var $168 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($169) {
          return Data_List_Types.NonEmptyList($168($169));
      };
  })();
  var reverse = wrappedOperation("reverse")(Data_List.reverse);
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["reverse"] = reverse;
})(PS);
(function(exports) {
  "use strict";

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                           
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showChar"] = showChar;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripPrefix"] = stripPrefix;
  exports["charAt"] = charAt;
  exports["uncons"] = uncons;
  exports["indexOf'"] = indexOf$prime;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null || m.length === 0) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                                                
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var match = $foreign["_match"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["match"] = match;
  exports["test"] = $foreign.test;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["noFlags"] = noFlags;
  exports["global"] = global;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Extra"] = $PS["Data.String.Extra"] || {};
  var exports = $PS["Data.String.Extra"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Char_Unicode = $PS["Data.Char.Unicode"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var toUnicodeLower = (function () {
      var $12 = Data_Functor.map(Data_Functor.functorArray)(Data_Char_Unicode.toLower);
      return function ($13) {
          return Data_String_CodeUnits.fromCharArray($12(Data_String_CodeUnits.toCharArray($13)));
      };
  })();
  var upfirst = (function () {
      var $14 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
          return Data_String_CodeUnits.singleton(Data_Char_Unicode.toUpper(v.head)) + toUnicodeLower(v.tail);
      });
      return function ($15) {
          return $14(Data_String_CodeUnits.uncons($15));
      };
  })();
  var regexGlobal = function (regexStr) {
      return Data_Either.fromRight()(Data_String_Regex.regex(regexStr)(Data_String_Regex_Flags.global));
  };
  var unicodeWords = (function () {
      var rsUpper = "[" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]");
      var rsOptVar = "[" + ("\\ufe0e\\ufe0f" + "]?");
      var rsLower = "[" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + "]");
      var rsDingbat = "[" + ("\\u2700-\\u27bf" + "]");
      var rsBreakRange = "\\xac\\xb1\\xd7\\xf7" + ("\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf" + ("\\u2000-\\u206f" + " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000"));
      var rsBreak = "[" + (rsBreakRange + "]");
      var rsMisc = "[^" + ("\\ud800-\\udfff" + (rsBreakRange + ("\\d+" + ("\\u2700-\\u27bf" + ("a-z\\xdf-\\xf6\\xf8-\\xff" + ("A-Z\\xc0-\\xd6\\xd8-\\xde" + "]"))))));
      var rsMiscLower = "(?:" + (rsLower + ("|" + (rsMisc + ")")));
      var rsMiscUpper = "(?:" + (rsUpper + ("|" + (rsMisc + ")")));
      var rsNonAstral = "[^" + ("\\ud800-\\udfff" + "]");
      var rsOptContrLower = "(?:" + ("['\\u2019]" + "(?:d|ll|m|re|s|t|ve))?");
      var rsOptContrUpper = "(?:" + ("['\\u2019]" + "(?:D|LL|M|RE|S|T|VE))?");
      var rsComboRange = "\\u0300-\\u036f" + ("\\ufe20-\\ufe2f" + "\\u20d0-\\u20ff");
      var rsCombo = "[" + (rsComboRange + "]");
      var rsModifier = "(?:" + (rsCombo + ("|" + "rsFitz)"));
      var reOptMod = rsModifier + "?";
      var rsOptJoin = "(?:" + ("\\u200d" + ("(?:" + (rsNonAstral + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + (rsOptVar + (reOptMod + ")*"))))))))));
      var rsSeq = rsOptVar + (reOptMod + rsOptJoin);
      var rsEmoji = "(?:" + (rsDingbat + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + rsSeq))))));
      var regexStr = Data_String_Common.joinWith("|")([ rsUpper + ("?" + (rsLower + ("+" + (rsOptContrLower + ("(?=" + (rsBreak + ("|" + (rsUpper + "|$)")))))))), rsMiscUpper + ("+" + (rsOptContrUpper + ("(?=" + (rsBreak + ("|" + (rsUpper + (rsMiscLower + "|$)"))))))), rsUpper + ("?" + (rsMiscLower + ("+" + rsOptContrLower))), rsUpper + ("+" + rsOptContrUpper), "\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)", "\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)", "\\d+", rsEmoji ]);
      var $16 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $17 = Data_String_Regex.match(regexGlobal(regexStr));
      return function ($18) {
          return $16($17($18));
      };
  })();
  var hasUnicodeWords = Data_String_Regex.test(regexGlobal("[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]"));
  var asciiWords = (function () {
      var $19 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidArray)(Data_Array_NonEmpty.catMaybes);
      var $20 = Data_String_Regex.match(regexGlobal("[^\x00-/:-@[-`{-\x7f]+"));
      return function ($21) {
          return $19($20($21));
      };
  })();
  var words = function (string) {
      var $6 = hasUnicodeWords(string);
      if ($6) {
          return unicodeWords(string);
      };
      return asciiWords(string);
  };   
  var pascalCase = (function () {
      var $25 = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(upfirst);
      return function ($26) {
          return $25(words($26));
      };
  })();
  var camelCase = (function () {
      var $27 = Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(function (v) {
          return toUnicodeLower(v.head) + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(pascalCase)(v.tail);
      });
      return function ($28) {
          return $27(Data_Array.uncons(words($28)));
      };
  })();
  exports["camelCase"] = camelCase;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var error = function (dictMonadEffect) {
      var $36 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($37) {
          return $36(Effect_Console.error($37));
      };
  };
  exports["error"] = error;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var argv = mkEffect(function (v) {
      return $foreign.process.argv;
  });
  exports["argv"] = argv;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Text.Parsing.StringParser"] = $PS["Text.Parsing.StringParser"] || {};
  var exports = $PS["Text.Parsing.StringParser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];                
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var Parser = function (x) {
      return x;
  };
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              return {
                  pos: v1.pos,
                  error: v2.error
              };
          })(v(v1));
      };
  };
  var showParseError = new Data_Show.Show(function (v) {
      return v.value0;
  });
  var runParser = function (v) {
      return function (s) {
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(function (v1) {
              return v1.error;
          })(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  };
  var lazyParser = new Control_Lazy.Lazy(function (f) {
      return Parser(function (str) {
          return unParser(f(Data_Unit.unit))(str);
      });
  });
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          var $80 = Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return {
                  result: f(v1.result),
                  suffix: v1.suffix
              };
          });
          return function ($81) {
              return $80(v($81));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser (line 88, column 7 - line 88, column 70): " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["showParseError"] = showParseError;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadRecParser"] = monadRecParser;
  exports["lazyParser"] = lazyParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Text.Parsing.StringParser.Combinators"] = $PS["Text.Parsing.StringParser.Combinators"] || {};
  var exports = $PS["Text.Parsing.StringParser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var option = function (a) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(a));
      };
  };
  var many1Till = function (p) {
      return function (end) {
          var ending = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(end)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Done(Data_List_NonEmpty.reverse(acc)));
              });
          };
          var $$continue = function (acc) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Control_Monad_Rec_Class.Loop(Data_List_NonEmpty.cons(v)(acc)));
              });
          };
          var inner = function (acc) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(ending(acc))($$continue(acc));
          };
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Monad_Rec_Class.tailRecM(Text_Parsing_StringParser.monadRecParser)(inner)(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(v));
          });
      };
  };
  var manyTill = function (p) {
      return function (end) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(end)(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value)))(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(many1Till(p)(end)));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var lookAhead = function (v) {
      return function (s) {
          var v1 = v(s);
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right({
                  result: v1.value0.result,
                  suffix: s
              });
          };
          return v1;
      };
  };
  var cons$prime = function (h) {
      return function (t) {
          return new Data_NonEmpty.NonEmpty(h, t);
      };
  };
  var sepEndBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sep)(function (v1) {
                  return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(sepEndBy(p)(sep))(function (v2) {
                      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(cons$prime(v)(v2));
                  });
              }))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_NonEmpty.singleton(v)));
          });
      };
  };
  var sepEndBy = function (p) {
      return function (sep) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Data_Functor.map(Text_Parsing_StringParser.functorParser)(Data_List_NonEmpty.toList)(sepEndBy1(p)(sep)))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_List_Types.Nil.value));
      };
  };
  exports["lookAhead"] = lookAhead;
  exports["many"] = many;
  exports["option"] = option;
  exports["sepEndBy"] = sepEndBy;
  exports["manyTill"] = manyTill;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Text.Parsing.StringParser.CodeUnits"] = $PS["Text.Parsing.StringParser.CodeUnits"] || {};
  var exports = $PS["Text.Parsing.StringParser.CodeUnits"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String_CodeUnits["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String_CodeUnits.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var regex = function (pat) {
      var pattern = (function () {
          var v = Data_String_CodeUnits.stripPrefix("^")(pat);
          if (v instanceof Data_Maybe.Nothing) {
              return "^" + pat;
          };
          return pat;
      })();
      var matchRegex = function (r) {
          return function (v) {
              var remainder = Data_String_CodeUnits.drop(v.pos)(v.str);
              var v1 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array_NonEmpty.head)(Data_String_Regex.match(r)(remainder));
              if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Data_Maybe.Just) {
                  return new Data_Either.Right({
                      result: v1.value0.value0,
                      suffix: {
                          str: v.str,
                          pos: v.pos + Data_String_CodeUnits.length(v1.value0.value0) | 0
                      }
                  });
              };
              return new Data_Either.Left({
                  pos: v.pos,
                  error: new Text_Parsing_StringParser.ParseError("no match")
              });
          };
      };
      var v = Data_String_Regex.regex(pattern)(Data_String_Regex_Flags.noFlags);
      if (v instanceof Data_Either.Left) {
          return Text_Parsing_StringParser.fail("Text.Parsing.StringParser.String.regex': illegal regex " + pat);
      };
      if (v instanceof Data_Either.Right) {
          return matchRegex(v.value0);
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.CodeUnits (line 127, column 3 - line 131, column 19): " + [ v.constructor.name ]);
  };
  var anyChar = function (v) {
      var v1 = Data_String_CodeUnits.charAt(v.pos)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: v1.value0,
              suffix: {
                  str: v.str,
                  pos: v.pos + 1 | 0
              }
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.CodeUnits (line 51, column 3 - line 53, column 64): " + [ v1.constructor.name ]);
  };  
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
          var $41 = f(v);
          if ($41) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " did not satisfy predicate"));
      }));
  };
  var whiteSpace = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many(satisfy(function (c) {
      return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
  })))(function (v) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String_CodeUnits.singleton)(v));
  });
  var skipSpaces = Data_Functor["void"](Text_Parsing_StringParser.functorParser)(whiteSpace);
  exports["anyChar"] = anyChar;
  exports["string"] = string;
  exports["whiteSpace"] = whiteSpace;
  exports["skipSpaces"] = skipSpaces;
  exports["regex"] = regex;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Svg.Parser"] = $PS["Svg.Parser"] || {};
  var exports = $PS["Svg.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_CodeUnits = $PS["Text.Parsing.StringParser.CodeUnits"];
  var Text_Parsing_StringParser_Combinators = $PS["Text.Parsing.StringParser.Combinators"];                
  var SvgAttribute = (function () {
      function SvgAttribute(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SvgAttribute.create = function (value0) {
          return function (value1) {
              return new SvgAttribute(value0, value1);
          };
      };
      return SvgAttribute;
  })();
  var SvgElement = (function () {
      function SvgElement(value0) {
          this.value0 = value0;
      };
      SvgElement.create = function (value0) {
          return new SvgElement(value0);
      };
      return SvgElement;
  })();
  var SvgText = (function () {
      function SvgText(value0) {
          this.value0 = value0;
      };
      SvgText.create = function (value0) {
          return new SvgText(value0);
      };
      return SvgText;
  })();
  var SvgComment = (function () {
      function SvgComment(value0) {
          this.value0 = value0;
      };
      SvgComment.create = function (value0) {
          return new SvgComment(value0);
      };
      return SvgComment;
  })();
  var textParser = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(function () {
      return Data_Functor.map(Text_Parsing_StringParser.functorParser)(SvgText.create)(Text_Parsing_StringParser_CodeUnits.regex("[^<]+"));
  });
  var mkElement = function (v) {
      return function (v1) {
          return function (v2) {
              return {
                  name: v,
                  attributes: v1,
                  children: v2
              };
          };
      };
  }; 
  var charListToString = (function () {
      var $73 = Data_Array.fromFoldable(Data_List_Types.foldableList);
      return function ($74) {
          return Data_String_CodeUnits.fromCharArray($73($74));
      };
  })();
  var commentParser = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("<!--"))(Text_Parsing_StringParser_Combinators.manyTill(Text_Parsing_StringParser_CodeUnits.anyChar)(Text_Parsing_StringParser_CodeUnits.string("-->"))))(function (v) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(SvgComment.create(charListToString(v)));
      });
  });
  var beforeSvgParser = Data_Functor.map(Text_Parsing_StringParser.functorParser)(charListToString)(Text_Parsing_StringParser_Combinators.manyTill(Text_Parsing_StringParser_CodeUnits.anyChar)(Text_Parsing_StringParser_Combinators.lookAhead(Text_Parsing_StringParser_CodeUnits.string("<svg"))));
  var attributeParser = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.regex("[^=>/]+"))(function (v) {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.option("")(Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.string("=\""))(Text_Parsing_StringParser_CodeUnits.regex("[^\"]*")))(Text_Parsing_StringParser_CodeUnits.string("\""))))(function (v1) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new SvgAttribute(v, v1));
      });
  });
  var openingParser = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Data_Functor["void"](Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_CodeUnits.string("<")))(function () {
      return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.regex("[^/> ]+"))(function (v) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(Text_Parsing_StringParser_Combinators.sepEndBy(attributeParser)(Text_Parsing_StringParser_CodeUnits.whiteSpace)))(function (v1) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(mkElement(v)(v1)(Data_List_Types.Nil.value));
          });
      });
  });
  var nodeParser = Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
      return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](textParser))(Text_Parsing_StringParser["try"](commentParser)))(elementParser);
  });
  var elementParser = Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(function () {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Control_Bind.bind(Text_Parsing_StringParser.bindParser)(openingParser)(closingOrChildrenParser))((function () {
              var $75 = Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser);
              return function ($76) {
                  return $75(SvgElement.create($76));
              };
          })());
      });
  });
  var closingOrChildrenParser = function (element) {
      var childrenParser = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Data_Functor["void"](Text_Parsing_StringParser.functorParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(Text_Parsing_StringParser_CodeUnits.string(">"))))(function () {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many(Text_Parsing_StringParser["try"](nodeParser)))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_StringParser.bindParser)(Data_Functor["void"](Text_Parsing_StringParser.functorParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(Text_Parsing_StringParser_CodeUnits.string("</" + (element.name + ">")))))(function () {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)({
                      children: v,
                      attributes: element.attributes,
                      name: element.name
                  });
              });
          });
      });
      return Control_Lazy.defer(Text_Parsing_StringParser.lazyParser)(function (v) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser["try"](Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_CodeUnits.skipSpaces)(Text_Parsing_StringParser_CodeUnits.string("/>")))(Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(element))))(childrenParser);
      });
  };
  var parseToSvgNode = function (input) {
      return Text_Parsing_StringParser.runParser(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(Text_Parsing_StringParser_Combinators.option("")(Text_Parsing_StringParser["try"](beforeSvgParser)))(nodeParser))(input);
  };
  exports["SvgElement"] = SvgElement;
  exports["SvgText"] = SvgText;
  exports["SvgComment"] = SvgComment;
  exports["parseToSvgNode"] = parseToSvgNode;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Extra = $PS["Data.String.Extra"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Console = $PS["Effect.Console"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Process = $PS["Node.Process"];
  var Svg_Parser = $PS["Svg.Parser"];
  var Text_Parsing_StringParser = $PS["Text.Parsing.StringParser"];                
  var repeatS = function (n) {
      return function (s) {
          var $7 = n === 0;
          if ($7) {
              return s;
          };
          return s + repeatS(n - 1 | 0)(s);
      };
  };
  var quoted = function (x) {
      return "\"" + (x + "\"");
  };
  var renderStyle = function (style) {
      var toAttr = function (x) {
          var nameValue = Data_String_Common.split(":")(x);
          if (nameValue.length === 2) {
              return Data_String_Extra.camelCase(Data_String_Common.trim(nameValue[0])) + (": " + quoted(nameValue[1]));
          };
          return "\x0a -- ignored style: " + ("'" + (x + ("'" + "\x0a")));
      };
      var styles = Data_Array.filter(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Eq.eq(Data_Eq.eqString)(" "))(Data_Eq.eq(Data_Eq.eqString)("\x0a")))(Data_String_Common.split(";")(style));
      var styleAttrs = Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_Functor.functorArray)(toAttr)(styles));
      return "css { " + (styleAttrs + " }");
  };
  var renderAttribute = function (v) {
      if (v.value0 === "style") {
          return Data_String_Extra.camelCase(v.value0) + (": " + renderStyle(v.value1));
      };
      return Data_String_Extra.camelCase(v.value0) + (": " + quoted(v.value1));
  };
  var renderNode = function (depth) {
      return function (v) {
          if (v instanceof Svg_Parser.SvgElement) {
              return renderElement(depth)(v.value0);
          };
          if (v instanceof Svg_Parser.SvgText) {
              return v.value0;
          };
          if (v instanceof Svg_Parser.SvgComment) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Main (line 32, column 20 - line 35, column 32): " + [ v.constructor.name ]);
      };
  };
  var renderElement = function (depth) {
      return function (v) {
          var spc = repeatS(depth)(" ");
          var name$prime = "x = SVG." + v.name;
          var kids = Data_Functor.map(Data_List_Types.functorList)(renderNode(depth + 2 | 0))(v.children);
          var brkSpc = "\x0a" + spc;
          var attrs = Data_Functor.map(Data_List_Types.functorList)(renderAttribute)(v.attributes);
          var commaBeforeChildren = (function () {
              var $21 = Data_Foldable["null"](Data_List_Types.foldableList)(attrs) || Data_Foldable["null"](Data_List_Types.foldableList)(v.children);
              if ($21) {
                  return "";
              };
              return brkSpc + ", ";
          })();
          var children$prime = commaBeforeChildren + (function () {
              var $22 = Data_Foldable["null"](Data_List_Types.foldableList)(v.children);
              if ($22) {
                  return "";
              };
              return "children: " + (brkSpc + ("[ " + (Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(brkSpc + ", ")(kids) + (brkSpc + "]"))));
          })();
          var attributes$prime = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(brkSpc + ", ")(attrs);
          return name$prime + (brkSpc + ("{ " + (attributes$prime + (children$prime + (brkSpc + "}")))));
      };
  };
  var main = function __do() {
      var v = Node_Process.argv();
      var v1 = Data_Array.last(v);
      if (v1 instanceof Data_Maybe.Just) {
          var v2 = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(v1.value0)();
          var v3 = Svg_Parser.parseToSvgNode(v2);
          if (v3 instanceof Data_Either.Left) {
              return Effect_Console.log(Data_Show.show(Text_Parsing_StringParser.showParseError)(v3.value0))();
          };
          if (v3 instanceof Data_Either.Right) {
              return Effect_Console.log(renderNode(4)(v3.value0))();
          };
          throw new Error("Failed pattern match at Main (line 25, column 7 - line 27, column 40): " + [ v3.constructor.name ]);
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return Effect_Class_Console.error(Effect_Class.monadEffectEffect)("Usage: node index.js pathToSvgFile")();
      };
      throw new Error("Failed pattern match at Main (line 22, column 3 - line 28, column 60): " + [ v1.constructor.name ]);
  };
  exports["main"] = main;
  exports["renderNode"] = renderNode;
  exports["repeatS"] = repeatS;
  exports["renderElement"] = renderElement;
  exports["quoted"] = quoted;
  exports["renderAttribute"] = renderAttribute;
  exports["renderStyle"] = renderStyle;
})(PS);
PS["Main"].main();